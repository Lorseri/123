// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	api "github.com/milvus-io/milvus/cdc/core/mq/api"
	"github.com/milvus-io/milvus/cdc/core/util"
	mock "github.com/stretchr/testify/mock"

	pb "github.com/milvus-io/milvus/cdc/core/pb"
)

// MsgStream is an autogenerated mock type for the MsgStream type
type MsgStream struct {
	util.CDCMark
	mock.Mock
}

type MsgStream_Expecter struct {
	mock *mock.Mock
}

func (_m *MsgStream) EXPECT() *MsgStream_Expecter {
	return &MsgStream_Expecter{mock: &_m.Mock}
}

// AsConsumer provides a mock function with given fields: channels, subName, position
func (_m *MsgStream) AsConsumer(channels []string, subName string, position api.SubscriptionInitialPosition) {
	_m.Called(channels, subName, position)
}

// MsgStream_AsConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AsConsumer'
type MsgStream_AsConsumer_Call struct {
	*mock.Call
}

// AsConsumer is a helper method to define mock.On call
//   - channels []string
//   - subName string
//   - position api.SubscriptionInitialPosition
func (_e *MsgStream_Expecter) AsConsumer(channels interface{}, subName interface{}, position interface{}) *MsgStream_AsConsumer_Call {
	return &MsgStream_AsConsumer_Call{Call: _e.mock.On("AsConsumer", channels, subName, position)}
}

func (_c *MsgStream_AsConsumer_Call) Run(run func(channels []string, subName string, position api.SubscriptionInitialPosition)) *MsgStream_AsConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].(string), args[2].(api.SubscriptionInitialPosition))
	})
	return _c
}

func (_c *MsgStream_AsConsumer_Call) Return() *MsgStream_AsConsumer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MsgStream_AsConsumer_Call) RunAndReturn(run func([]string, string, api.SubscriptionInitialPosition)) *MsgStream_AsConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// Chan provides a mock function with given fields:
func (_m *MsgStream) Chan() <-chan *api.MsgPack {
	ret := _m.Called()

	var r0 <-chan *api.MsgPack
	if rf, ok := ret.Get(0).(func() <-chan *api.MsgPack); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *api.MsgPack)
		}
	}

	return r0
}

// MsgStream_Chan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Chan'
type MsgStream_Chan_Call struct {
	*mock.Call
}

// Chan is a helper method to define mock.On call
func (_e *MsgStream_Expecter) Chan() *MsgStream_Chan_Call {
	return &MsgStream_Chan_Call{Call: _e.mock.On("Chan")}
}

func (_c *MsgStream_Chan_Call) Run(run func()) *MsgStream_Chan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MsgStream_Chan_Call) Return(_a0 <-chan *api.MsgPack) *MsgStream_Chan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MsgStream_Chan_Call) RunAndReturn(run func() <-chan *api.MsgPack) *MsgStream_Chan_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *MsgStream) Close() {
	_m.Called()
}

// MsgStream_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MsgStream_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MsgStream_Expecter) Close() *MsgStream_Close_Call {
	return &MsgStream_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MsgStream_Close_Call) Run(run func()) *MsgStream_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MsgStream_Close_Call) Return() *MsgStream_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MsgStream_Close_Call) RunAndReturn(run func()) *MsgStream_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestMsgID provides a mock function with given fields: channel
func (_m *MsgStream) GetLatestMsgID(channel string) (api.MessageID, error) {
	ret := _m.Called(channel)

	var r0 api.MessageID
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (api.MessageID, error)); ok {
		return rf(channel)
	}
	if rf, ok := ret.Get(0).(func(string) api.MessageID); ok {
		r0 = rf(channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.MessageID)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MsgStream_GetLatestMsgID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestMsgID'
type MsgStream_GetLatestMsgID_Call struct {
	*mock.Call
}

// GetLatestMsgID is a helper method to define mock.On call
//   - channel string
func (_e *MsgStream_Expecter) GetLatestMsgID(channel interface{}) *MsgStream_GetLatestMsgID_Call {
	return &MsgStream_GetLatestMsgID_Call{Call: _e.mock.On("GetLatestMsgID", channel)}
}

func (_c *MsgStream_GetLatestMsgID_Call) Run(run func(channel string)) *MsgStream_GetLatestMsgID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MsgStream_GetLatestMsgID_Call) Return(_a0 api.MessageID, _a1 error) *MsgStream_GetLatestMsgID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MsgStream_GetLatestMsgID_Call) RunAndReturn(run func(string) (api.MessageID, error)) *MsgStream_GetLatestMsgID_Call {
	_c.Call.Return(run)
	return _c
}

// Seek provides a mock function with given fields: offset
func (_m *MsgStream) Seek(offset []*pb.MsgPosition) error {
	ret := _m.Called(offset)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*pb.MsgPosition) error); ok {
		r0 = rf(offset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MsgStream_Seek_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Seek'
type MsgStream_Seek_Call struct {
	*mock.Call
}

// Seek is a helper method to define mock.On call
//   - offset []*pb.MsgPosition
func (_e *MsgStream_Expecter) Seek(offset interface{}) *MsgStream_Seek_Call {
	return &MsgStream_Seek_Call{Call: _e.mock.On("Seek", offset)}
}

func (_c *MsgStream_Seek_Call) Run(run func(offset []*pb.MsgPosition)) *MsgStream_Seek_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*pb.MsgPosition))
	})
	return _c
}

func (_c *MsgStream_Seek_Call) Return(_a0 error) *MsgStream_Seek_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MsgStream_Seek_Call) RunAndReturn(run func([]*pb.MsgPosition) error) *MsgStream_Seek_Call {
	_c.Call.Return(run)
	return _c
}

// cdc provides a mock function with given fields:
func (_m *MsgStream) cdc() {
	_m.Called()
}

// MsgStream_cdc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'cdc'
type MsgStream_cdc_Call struct {
	*mock.Call
}

// cdc is a helper method to define mock.On call
func (_e *MsgStream_Expecter) cdc() *MsgStream_cdc_Call {
	return &MsgStream_cdc_Call{Call: _e.mock.On("cdc")}
}

func (_c *MsgStream_cdc_Call) Run(run func()) *MsgStream_cdc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MsgStream_cdc_Call) Return() *MsgStream_cdc_Call {
	_c.Call.Return()
	return _c
}

func (_c *MsgStream_cdc_Call) RunAndReturn(run func()) *MsgStream_cdc_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMsgStream interface {
	mock.TestingT
	Cleanup(func())
}

// NewMsgStream creates a new instance of MsgStream. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMsgStream(t mockConstructorTestingTNewMsgStream) *MsgStream {
	mock := &MsgStream{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
