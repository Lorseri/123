// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	"github.com/milvus-io/milvus/cdc/core/util"

	api "github.com/milvus-io/milvus/cdc/core/mq/api"

	mock "github.com/stretchr/testify/mock"
)

// Factory is an autogenerated mock type for the Factory type
type Factory struct {
	util.CDCMark
	mock.Mock
}

type Factory_Expecter struct {
	mock *mock.Mock
}

func (_m *Factory) EXPECT() *Factory_Expecter {
	return &Factory_Expecter{mock: &_m.Mock}
}

// NewMsgStream provides a mock function with given fields: ctx
func (_m *Factory) NewMsgStream(ctx context.Context) (api.MsgStream, error) {
	ret := _m.Called(ctx)

	var r0 api.MsgStream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (api.MsgStream, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) api.MsgStream); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.MsgStream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Factory_NewMsgStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewMsgStream'
type Factory_NewMsgStream_Call struct {
	*mock.Call
}

// NewMsgStream is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Factory_Expecter) NewMsgStream(ctx interface{}) *Factory_NewMsgStream_Call {
	return &Factory_NewMsgStream_Call{Call: _e.mock.On("NewMsgStream", ctx)}
}

func (_c *Factory_NewMsgStream_Call) Run(run func(ctx context.Context)) *Factory_NewMsgStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Factory_NewMsgStream_Call) Return(_a0 api.MsgStream, _a1 error) *Factory_NewMsgStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Factory_NewMsgStream_Call) RunAndReturn(run func(context.Context) (api.MsgStream, error)) *Factory_NewMsgStream_Call {
	_c.Call.Return(run)
	return _c
}

// NewMsgStreamDisposer provides a mock function with given fields: ctx
func (_m *Factory) NewMsgStreamDisposer(ctx context.Context) func([]string, string) error {
	ret := _m.Called(ctx)

	var r0 func([]string, string) error
	if rf, ok := ret.Get(0).(func(context.Context) func([]string, string) error); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func([]string, string) error)
		}
	}

	return r0
}

// Factory_NewMsgStreamDisposer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewMsgStreamDisposer'
type Factory_NewMsgStreamDisposer_Call struct {
	*mock.Call
}

// NewMsgStreamDisposer is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Factory_Expecter) NewMsgStreamDisposer(ctx interface{}) *Factory_NewMsgStreamDisposer_Call {
	return &Factory_NewMsgStreamDisposer_Call{Call: _e.mock.On("NewMsgStreamDisposer", ctx)}
}

func (_c *Factory_NewMsgStreamDisposer_Call) Run(run func(ctx context.Context)) *Factory_NewMsgStreamDisposer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Factory_NewMsgStreamDisposer_Call) Return(_a0 func([]string, string) error) *Factory_NewMsgStreamDisposer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Factory_NewMsgStreamDisposer_Call) RunAndReturn(run func(context.Context) func([]string, string) error) *Factory_NewMsgStreamDisposer_Call {
	_c.Call.Return(run)
	return _c
}

// cdc provides a mock function with given fields:
func (_m *Factory) cdc() {
	_m.Called()
}

// Factory_cdc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'cdc'
type Factory_cdc_Call struct {
	*mock.Call
}

// cdc is a helper method to define mock.On call
func (_e *Factory_Expecter) cdc() *Factory_cdc_Call {
	return &Factory_cdc_Call{Call: _e.mock.On("cdc")}
}

func (_c *Factory_cdc_Call) Run(run func()) *Factory_cdc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Factory_cdc_Call) Return() *Factory_cdc_Call {
	_c.Call.Return()
	return _c
}

func (_c *Factory_cdc_Call) RunAndReturn(run func()) *Factory_cdc_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewFactory creates a new instance of Factory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFactory(t mockConstructorTestingTNewFactory) *Factory {
	mock := &Factory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
