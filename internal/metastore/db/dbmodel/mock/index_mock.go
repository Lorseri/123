// Code generated by MockGen. DO NOT EDIT.
// Source: internal/metastore/db/dbmodel/index.go

// Package dbmodel is a generated GoMock package.
package mock

import (
	"reflect"

	"github.com/golang/mock/gomock"
	"github.com/milvus-io/milvus/internal/metastore/db/dbmodel"
	"github.com/milvus-io/milvus/internal/util/typeutil"
)

// MockIIndexDb is a mock of IIndexDb interface.
type MockIIndexDb struct {
	ctrl     *gomock.Controller
	recorder *MockIIndexDbMockRecorder
}

// MockIIndexDbMockRecorder is the mock recorder for MockIIndexDb.
type MockIIndexDbMockRecorder struct {
	mock *MockIIndexDb
}

// NewMockIIndexDb creates a new mock instance.
func NewMockIIndexDb(ctrl *gomock.Controller) *MockIIndexDb {
	mock := &MockIIndexDb{ctrl: ctrl}
	mock.recorder = &MockIIndexDbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIIndexDb) EXPECT() *MockIIndexDbMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIIndexDb) Get(tenantID string, collectionID typeutil.UniqueID) ([]*dbmodel.Index, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", tenantID, collectionID)
	ret0, _ := ret[0].([]*dbmodel.Index)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIIndexDbMockRecorder) Get(tenantID, collectionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIIndexDb)(nil).Get), tenantID, collectionID)
}

// Insert mocks base method.
func (m *MockIIndexDb) Insert(in []*dbmodel.Index) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIIndexDbMockRecorder) Insert(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIIndexDb)(nil).Insert), in)
}

// List mocks base method.
func (m *MockIIndexDb) List(tenantID string) ([]*dbmodel.IndexResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", tenantID)
	ret0, _ := ret[0].([]*dbmodel.IndexResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIIndexDbMockRecorder) List(tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIIndexDb)(nil).List), tenantID)
}

// MarkDeletedByCollID mocks base method.
func (m *MockIIndexDb) MarkDeletedByCollID(tenantID string, collID typeutil.UniqueID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkDeletedByCollID", tenantID, collID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkDeletedByCollID indicates an expected call of MarkDeletedByCollID.
func (mr *MockIIndexDbMockRecorder) MarkDeletedByCollID(tenantID, collID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDeletedByCollID", reflect.TypeOf((*MockIIndexDb)(nil).MarkDeletedByCollID), tenantID, collID)
}

// MarkDeletedByIdxID mocks base method.
func (m *MockIIndexDb) MarkDeletedByIdxID(tenantID string, idxID typeutil.UniqueID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkDeletedByIdxID", tenantID, idxID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkDeletedByIdxID indicates an expected call of MarkDeletedByIdxID.
func (mr *MockIIndexDbMockRecorder) MarkDeletedByIdxID(tenantID, idxID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDeletedByIdxID", reflect.TypeOf((*MockIIndexDb)(nil).MarkDeletedByIdxID), tenantID, idxID)
}
