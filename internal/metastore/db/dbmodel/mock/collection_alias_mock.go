// Code generated by MockGen. DO NOT EDIT.
// Source: internal/metastore/db/dbmodel/collection_alias.go

// Package dbmodel is a generated GoMock package.
package mock

import (
	"reflect"

	"github.com/golang/mock/gomock"
	"github.com/milvus-io/milvus/internal/metastore/db/dbmodel"
	"github.com/milvus-io/milvus/internal/util/typeutil"
)

// MockICollAliasDb is a mock of ICollAliasDb interface.
type MockICollAliasDb struct {
	ctrl     *gomock.Controller
	recorder *MockICollAliasDbMockRecorder
}

// MockICollAliasDbMockRecorder is the mock recorder for MockICollAliasDb.
type MockICollAliasDbMockRecorder struct {
	mock *MockICollAliasDb
}

// NewMockICollAliasDb creates a new mock instance.
func NewMockICollAliasDb(ctrl *gomock.Controller) *MockICollAliasDb {
	mock := &MockICollAliasDb{ctrl: ctrl}
	mock.recorder = &MockICollAliasDbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICollAliasDb) EXPECT() *MockICollAliasDbMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockICollAliasDb) Insert(in []*dbmodel.CollectionAlias) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockICollAliasDbMockRecorder) Insert(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockICollAliasDb)(nil).Insert), in)
}

// List mocks base method.
func (m *MockICollAliasDb) List(tenantID string, cidTsPairs []*dbmodel.CollectionAlias) ([]*dbmodel.CollectionAlias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", tenantID, cidTsPairs)
	ret0, _ := ret[0].([]*dbmodel.CollectionAlias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockICollAliasDbMockRecorder) List(tenantID, cidTsPairs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockICollAliasDb)(nil).List), tenantID, cidTsPairs)
}

// ListCidTs mocks base method.
func (m *MockICollAliasDb) ListCidTs(tenantID string, ts typeutil.Timestamp) ([]*dbmodel.CollectionAlias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCidTs", tenantID, ts)
	ret0, _ := ret[0].([]*dbmodel.CollectionAlias)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCidTs indicates an expected call of ListCidTs.
func (mr *MockICollAliasDbMockRecorder) ListCidTs(tenantID, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCidTs", reflect.TypeOf((*MockICollAliasDb)(nil).ListCidTs), tenantID, ts)
}

// MarkDeleted mocks base method.
func (m *MockICollAliasDb) MarkDeleted(tenantID string, collID typeutil.UniqueID, aliases []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkDeleted", tenantID, collID, aliases)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkDeleted indicates an expected call of MarkDeleted.
func (mr *MockICollAliasDbMockRecorder) MarkDeleted(tenantID, collID, aliases interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDeleted", reflect.TypeOf((*MockICollAliasDb)(nil).MarkDeleted), tenantID, collID, aliases)
}
