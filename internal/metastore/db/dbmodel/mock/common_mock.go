// Code generated by MockGen. DO NOT EDIT.
// Source: internal/metastore/db/dbmodel/common.go

// Package dbmodel is a generated GoMock package.
package mock

import (
	"context"
	"reflect"

	"github.com/golang/mock/gomock"
	"github.com/milvus-io/milvus/internal/metastore/db/dbmodel"
)

// MockIMetaDomain is a mock of IMetaDomain interface.
type MockIMetaDomain struct {
	ctrl     *gomock.Controller
	recorder *MockIMetaDomainMockRecorder
}

// MockIMetaDomainMockRecorder is the mock recorder for MockIMetaDomain.
type MockIMetaDomainMockRecorder struct {
	mock *MockIMetaDomain
}

// NewMockIMetaDomain creates a new mock instance.
func NewMockIMetaDomain(ctrl *gomock.Controller) *MockIMetaDomain {
	mock := &MockIMetaDomain{ctrl: ctrl}
	mock.recorder = &MockIMetaDomainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMetaDomain) EXPECT() *MockIMetaDomainMockRecorder {
	return m.recorder
}

// CollAliasDb mocks base method.
func (m *MockIMetaDomain) CollAliasDb(ctx context.Context) dbmodel.ICollAliasDb {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollAliasDb", ctx)
	ret0, _ := ret[0].(dbmodel.ICollAliasDb)
	return ret0
}

// CollAliasDb indicates an expected call of CollAliasDb.
func (mr *MockIMetaDomainMockRecorder) CollAliasDb(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollAliasDb", reflect.TypeOf((*MockIMetaDomain)(nil).CollAliasDb), ctx)
}

// CollChannelDb mocks base method.
func (m *MockIMetaDomain) CollChannelDb(ctx context.Context) dbmodel.ICollChannelDb {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollChannelDb", ctx)
	ret0, _ := ret[0].(dbmodel.ICollChannelDb)
	return ret0
}

// CollChannelDb indicates an expected call of CollChannelDb.
func (mr *MockIMetaDomainMockRecorder) CollChannelDb(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollChannelDb", reflect.TypeOf((*MockIMetaDomain)(nil).CollChannelDb), ctx)
}

// CollectionDb mocks base method.
func (m *MockIMetaDomain) CollectionDb(ctx context.Context) dbmodel.ICollectionDb {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectionDb", ctx)
	ret0, _ := ret[0].(dbmodel.ICollectionDb)
	return ret0
}

// CollectionDb indicates an expected call of CollectionDb.
func (mr *MockIMetaDomainMockRecorder) CollectionDb(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectionDb", reflect.TypeOf((*MockIMetaDomain)(nil).CollectionDb), ctx)
}

// FieldDb mocks base method.
func (m *MockIMetaDomain) FieldDb(ctx context.Context) dbmodel.IFieldDb {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FieldDb", ctx)
	ret0, _ := ret[0].(dbmodel.IFieldDb)
	return ret0
}

// FieldDb indicates an expected call of FieldDb.
func (mr *MockIMetaDomainMockRecorder) FieldDb(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FieldDb", reflect.TypeOf((*MockIMetaDomain)(nil).FieldDb), ctx)
}

// IndexDb mocks base method.
func (m *MockIMetaDomain) IndexDb(ctx context.Context) dbmodel.IIndexDb {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexDb", ctx)
	ret0, _ := ret[0].(dbmodel.IIndexDb)
	return ret0
}

// IndexDb indicates an expected call of IndexDb.
func (mr *MockIMetaDomainMockRecorder) IndexDb(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexDb", reflect.TypeOf((*MockIMetaDomain)(nil).IndexDb), ctx)
}

// PartitionDb mocks base method.
func (m *MockIMetaDomain) PartitionDb(ctx context.Context) dbmodel.IPartitionDb {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartitionDb", ctx)
	ret0, _ := ret[0].(dbmodel.IPartitionDb)
	return ret0
}

// PartitionDb indicates an expected call of PartitionDb.
func (mr *MockIMetaDomainMockRecorder) PartitionDb(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartitionDb", reflect.TypeOf((*MockIMetaDomain)(nil).PartitionDb), ctx)
}

// SegmentIndexDb mocks base method.
func (m *MockIMetaDomain) SegmentIndexDb(ctx context.Context) dbmodel.ISegmentIndexDb {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SegmentIndexDb", ctx)
	ret0, _ := ret[0].(dbmodel.ISegmentIndexDb)
	return ret0
}

// SegmentIndexDb indicates an expected call of SegmentIndexDb.
func (mr *MockIMetaDomainMockRecorder) SegmentIndexDb(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SegmentIndexDb", reflect.TypeOf((*MockIMetaDomain)(nil).SegmentIndexDb), ctx)
}

// UserDb mocks base method.
func (m *MockIMetaDomain) UserDb(ctx context.Context) dbmodel.IUserDb {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDb", ctx)
	ret0, _ := ret[0].(dbmodel.IUserDb)
	return ret0
}

// UserDb indicates an expected call of UserDb.
func (mr *MockIMetaDomainMockRecorder) UserDb(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDb", reflect.TypeOf((*MockIMetaDomain)(nil).UserDb), ctx)
}

// MockITransaction is a mock of ITransaction interface.
type MockITransaction struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionMockRecorder
}

// MockITransactionMockRecorder is the mock recorder for MockITransaction.
type MockITransactionMockRecorder struct {
	mock *MockITransaction
}

// NewMockITransaction creates a new mock instance.
func NewMockITransaction(ctrl *gomock.Controller) *MockITransaction {
	mock := &MockITransaction{ctrl: ctrl}
	mock.recorder = &MockITransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransaction) EXPECT() *MockITransactionMockRecorder {
	return m.recorder
}

// Transaction mocks base method.
func (m *MockITransaction) Transaction(ctx context.Context, fn func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockITransactionMockRecorder) Transaction(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockITransaction)(nil).Transaction), ctx, fn)
}
