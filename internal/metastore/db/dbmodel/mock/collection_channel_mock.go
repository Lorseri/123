// Code generated by MockGen. DO NOT EDIT.
// Source: internal/metastore/db/dbmodel/collection_channel.go

// Package dbmodel is a generated GoMock package.
package mock

import (
	"reflect"

	"github.com/golang/mock/gomock"
	"github.com/milvus-io/milvus/internal/metastore/db/dbmodel"
	"github.com/milvus-io/milvus/internal/util/typeutil"
)

// MockICollChannelDb is a mock of ICollChannelDb interface.
type MockICollChannelDb struct {
	ctrl     *gomock.Controller
	recorder *MockICollChannelDbMockRecorder
}

// MockICollChannelDbMockRecorder is the mock recorder for MockICollChannelDb.
type MockICollChannelDbMockRecorder struct {
	mock *MockICollChannelDb
}

// NewMockICollChannelDb creates a new mock instance.
func NewMockICollChannelDb(ctrl *gomock.Controller) *MockICollChannelDb {
	mock := &MockICollChannelDb{ctrl: ctrl}
	mock.recorder = &MockICollChannelDbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICollChannelDb) EXPECT() *MockICollChannelDbMockRecorder {
	return m.recorder
}

// GetByCollID mocks base method.
func (m *MockICollChannelDb) GetByCollID(tenantID string, collectionID typeutil.UniqueID, ts typeutil.Timestamp) ([]*dbmodel.CollectionChannel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCollID", tenantID, collectionID, ts)
	ret0, _ := ret[0].([]*dbmodel.CollectionChannel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCollID indicates an expected call of GetByCollID.
func (mr *MockICollChannelDbMockRecorder) GetByCollID(tenantID, collectionID, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCollID", reflect.TypeOf((*MockICollChannelDb)(nil).GetByCollID), tenantID, collectionID, ts)
}

// Insert mocks base method.
func (m *MockICollChannelDb) Insert(in []*dbmodel.CollectionChannel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockICollChannelDbMockRecorder) Insert(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockICollChannelDb)(nil).Insert), in)
}

// MarkDeleted mocks base method.
func (m *MockICollChannelDb) MarkDeleted(tenantID string, collID typeutil.UniqueID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkDeleted", tenantID, collID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkDeleted indicates an expected call of MarkDeleted.
func (mr *MockICollChannelDbMockRecorder) MarkDeleted(tenantID, collID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDeleted", reflect.TypeOf((*MockICollChannelDb)(nil).MarkDeleted), tenantID, collID)
}
