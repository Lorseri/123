// Code generated by MockGen. DO NOT EDIT.
// Source: internal/metastore/db/dbmodel/collection.go

// Package dbmodel is a generated GoMock package.
package mock

import (
	"reflect"

	"github.com/golang/mock/gomock"
	"github.com/milvus-io/milvus/internal/metastore/db/dbmodel"
	"github.com/milvus-io/milvus/internal/util/typeutil"
)

// MockICollectionDb is a mock of ICollectionDb interface.
type MockICollectionDb struct {
	ctrl     *gomock.Controller
	recorder *MockICollectionDbMockRecorder
}

// MockICollectionDbMockRecorder is the mock recorder for MockICollectionDb.
type MockICollectionDbMockRecorder struct {
	mock *MockICollectionDb
}

// NewMockICollectionDb creates a new mock instance.
func NewMockICollectionDb(ctrl *gomock.Controller) *MockICollectionDb {
	mock := &MockICollectionDb{ctrl: ctrl}
	mock.recorder = &MockICollectionDbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICollectionDb) EXPECT() *MockICollectionDbMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockICollectionDb) Get(tenantID string, collectionID typeutil.UniqueID, ts typeutil.Timestamp) (*dbmodel.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", tenantID, collectionID, ts)
	ret0, _ := ret[0].(*dbmodel.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockICollectionDbMockRecorder) Get(tenantID, collectionID, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockICollectionDb)(nil).Get), tenantID, collectionID, ts)
}

// GetCidTs mocks base method.
func (m *MockICollectionDb) GetCidTs(tenantID string, collectionID typeutil.UniqueID, ts typeutil.Timestamp) (*dbmodel.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCidTs", tenantID, collectionID, ts)
	ret0, _ := ret[0].(*dbmodel.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCidTs indicates an expected call of GetCidTs.
func (mr *MockICollectionDbMockRecorder) GetCidTs(tenantID, collectionID, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCidTs", reflect.TypeOf((*MockICollectionDb)(nil).GetCidTs), tenantID, collectionID, ts)
}

// GetIDByName mocks base method.
func (m *MockICollectionDb) GetIDByName(tenantID, collectionName string) (typeutil.UniqueID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDByName", tenantID, collectionName)
	ret0, _ := ret[0].(typeutil.UniqueID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDByName indicates an expected call of GetIDByName.
func (mr *MockICollectionDbMockRecorder) GetIDByName(tenantID, collectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDByName", reflect.TypeOf((*MockICollectionDb)(nil).GetIDByName), tenantID, collectionName)
}

// Insert mocks base method.
func (m *MockICollectionDb) Insert(in *dbmodel.Collection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockICollectionDbMockRecorder) Insert(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockICollectionDb)(nil).Insert), in)
}

// ListCidTs mocks base method.
func (m *MockICollectionDb) ListCidTs(ts typeutil.Timestamp) ([]*dbmodel.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCidTs", ts)
	ret0, _ := ret[0].([]*dbmodel.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCidTs indicates an expected call of ListCidTs.
func (mr *MockICollectionDbMockRecorder) ListCidTs(ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCidTs", reflect.TypeOf((*MockICollectionDb)(nil).ListCidTs), ts)
}

// MarkDeleted mocks base method.
func (m *MockICollectionDb) MarkDeleted(tenantID string, collID typeutil.UniqueID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkDeleted", tenantID, collID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkDeleted indicates an expected call of MarkDeleted.
func (mr *MockICollectionDbMockRecorder) MarkDeleted(tenantID, collID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDeleted", reflect.TypeOf((*MockICollectionDb)(nil).MarkDeleted), tenantID, collID)
}
