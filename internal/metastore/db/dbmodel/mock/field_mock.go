// Code generated by MockGen. DO NOT EDIT.
// Source: internal/metastore/db/dbmodel/field.go

// Package dbmodel is a generated GoMock package.
package mock

import (
	"reflect"

	"github.com/golang/mock/gomock"
	"github.com/milvus-io/milvus/internal/metastore/db/dbmodel"
	"github.com/milvus-io/milvus/internal/util/typeutil"
)

// MockIFieldDb is a mock of IFieldDb interface.
type MockIFieldDb struct {
	ctrl     *gomock.Controller
	recorder *MockIFieldDbMockRecorder
}

// MockIFieldDbMockRecorder is the mock recorder for MockIFieldDb.
type MockIFieldDbMockRecorder struct {
	mock *MockIFieldDb
}

// NewMockIFieldDb creates a new mock instance.
func NewMockIFieldDb(ctrl *gomock.Controller) *MockIFieldDb {
	mock := &MockIFieldDb{ctrl: ctrl}
	mock.recorder = &MockIFieldDbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFieldDb) EXPECT() *MockIFieldDbMockRecorder {
	return m.recorder
}

// GetByCollID mocks base method.
func (m *MockIFieldDb) GetByCollID(tenantID string, collectionID typeutil.UniqueID, ts typeutil.Timestamp) ([]*dbmodel.Field, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCollID", tenantID, collectionID, ts)
	ret0, _ := ret[0].([]*dbmodel.Field)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCollID indicates an expected call of GetByCollID.
func (mr *MockIFieldDbMockRecorder) GetByCollID(tenantID, collectionID, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCollID", reflect.TypeOf((*MockIFieldDb)(nil).GetByCollID), tenantID, collectionID, ts)
}

// Insert mocks base method.
func (m *MockIFieldDb) Insert(in []*dbmodel.Field) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIFieldDbMockRecorder) Insert(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIFieldDb)(nil).Insert), in)
}
