// Code generated by MockGen. DO NOT EDIT.
// Source: internal/metastore/db/dbmodel/segment_index.go

// Package dbmodel is a generated GoMock package.
package mock

import (
	"reflect"

	"github.com/golang/mock/gomock"
	"github.com/milvus-io/milvus/internal/metastore/db/dbmodel"
	"github.com/milvus-io/milvus/internal/util/typeutil"
)

// MockISegmentIndexDb is a mock of ISegmentIndexDb interface.
type MockISegmentIndexDb struct {
	ctrl     *gomock.Controller
	recorder *MockISegmentIndexDbMockRecorder
}

// MockISegmentIndexDbMockRecorder is the mock recorder for MockISegmentIndexDb.
type MockISegmentIndexDbMockRecorder struct {
	mock *MockISegmentIndexDb
}

// NewMockISegmentIndexDb creates a new mock instance.
func NewMockISegmentIndexDb(ctrl *gomock.Controller) *MockISegmentIndexDb {
	mock := &MockISegmentIndexDb{ctrl: ctrl}
	mock.recorder = &MockISegmentIndexDbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISegmentIndexDb) EXPECT() *MockISegmentIndexDbMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockISegmentIndexDb) Insert(in []*dbmodel.SegmentIndex) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockISegmentIndexDbMockRecorder) Insert(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockISegmentIndexDb)(nil).Insert), in)
}

// MarkDeleted mocks base method.
func (m *MockISegmentIndexDb) MarkDeleted(tenantID string, in []*dbmodel.SegmentIndex) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkDeleted", tenantID, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkDeleted indicates an expected call of MarkDeleted.
func (mr *MockISegmentIndexDbMockRecorder) MarkDeleted(tenantID, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDeleted", reflect.TypeOf((*MockISegmentIndexDb)(nil).MarkDeleted), tenantID, in)
}

// MarkDeletedByCollID mocks base method.
func (m *MockISegmentIndexDb) MarkDeletedByCollID(tenantID string, collID typeutil.UniqueID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkDeletedByCollID", tenantID, collID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkDeletedByCollID indicates an expected call of MarkDeletedByCollID.
func (mr *MockISegmentIndexDbMockRecorder) MarkDeletedByCollID(tenantID, collID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDeletedByCollID", reflect.TypeOf((*MockISegmentIndexDb)(nil).MarkDeletedByCollID), tenantID, collID)
}

// MarkDeletedByIdxID mocks base method.
func (m *MockISegmentIndexDb) MarkDeletedByIdxID(tenantID string, idxID typeutil.UniqueID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkDeletedByIdxID", tenantID, idxID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkDeletedByIdxID indicates an expected call of MarkDeletedByIdxID.
func (mr *MockISegmentIndexDbMockRecorder) MarkDeletedByIdxID(tenantID, idxID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDeletedByIdxID", reflect.TypeOf((*MockISegmentIndexDb)(nil).MarkDeletedByIdxID), tenantID, idxID)
}
