// Code generated by MockGen. DO NOT EDIT.
// Source: internal/metastore/db/dbmodel/partition.go

// Package dbmodel is a generated GoMock package.
package mock

import (
	"reflect"

	"github.com/golang/mock/gomock"
	"github.com/milvus-io/milvus/internal/metastore/db/dbmodel"
	"github.com/milvus-io/milvus/internal/util/typeutil"
)

// MockIPartitionDb is a mock of IPartitionDb interface.
type MockIPartitionDb struct {
	ctrl     *gomock.Controller
	recorder *MockIPartitionDbMockRecorder
}

// MockIPartitionDbMockRecorder is the mock recorder for MockIPartitionDb.
type MockIPartitionDbMockRecorder struct {
	mock *MockIPartitionDb
}

// NewMockIPartitionDb creates a new mock instance.
func NewMockIPartitionDb(ctrl *gomock.Controller) *MockIPartitionDb {
	mock := &MockIPartitionDb{ctrl: ctrl}
	mock.recorder = &MockIPartitionDbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPartitionDb) EXPECT() *MockIPartitionDbMockRecorder {
	return m.recorder
}

// GetByCollID mocks base method.
func (m *MockIPartitionDb) GetByCollID(tenantID string, collectionID typeutil.UniqueID, ts typeutil.Timestamp) ([]*dbmodel.Partition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCollID", tenantID, collectionID, ts)
	ret0, _ := ret[0].([]*dbmodel.Partition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCollID indicates an expected call of GetByCollID.
func (mr *MockIPartitionDbMockRecorder) GetByCollID(tenantID, collectionID, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCollID", reflect.TypeOf((*MockIPartitionDb)(nil).GetByCollID), tenantID, collectionID, ts)
}

// Insert mocks base method.
func (m *MockIPartitionDb) Insert(in []*dbmodel.Partition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIPartitionDbMockRecorder) Insert(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIPartitionDb)(nil).Insert), in)
}

// MarkDeleted mocks base method.
func (m *MockIPartitionDb) MarkDeleted(tenantID string, collID typeutil.UniqueID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkDeleted", tenantID, collID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkDeleted indicates an expected call of MarkDeleted.
func (mr *MockIPartitionDbMockRecorder) MarkDeleted(tenantID, collID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDeleted", reflect.TypeOf((*MockIPartitionDb)(nil).MarkDeleted), tenantID, collID)
}
