// Code generated by MockGen. DO NOT EDIT.
// Source: internal/metastore/db/dbmodel/user.go

// Package dbmodel is a generated GoMock package.
package mock

import (
	"reflect"

	"github.com/golang/mock/gomock"
	"github.com/milvus-io/milvus/internal/metastore/db/dbmodel"
)

// MockIUserDb is a mock of IUserDb interface.
type MockIUserDb struct {
	ctrl     *gomock.Controller
	recorder *MockIUserDbMockRecorder
}

// MockIUserDbMockRecorder is the mock recorder for MockIUserDb.
type MockIUserDbMockRecorder struct {
	mock *MockIUserDb
}

// NewMockIUserDb creates a new mock instance.
func NewMockIUserDb(ctrl *gomock.Controller) *MockIUserDb {
	mock := &MockIUserDb{ctrl: ctrl}
	mock.recorder = &MockIUserDbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserDb) EXPECT() *MockIUserDbMockRecorder {
	return m.recorder
}

// GetByUsername mocks base method.
func (m *MockIUserDb) GetByUsername(tenantID, username string) (*dbmodel.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", tenantID, username)
	ret0, _ := ret[0].(*dbmodel.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockIUserDbMockRecorder) GetByUsername(tenantID, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockIUserDb)(nil).GetByUsername), tenantID, username)
}

// Insert mocks base method.
func (m *MockIUserDb) Insert(in *dbmodel.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIUserDbMockRecorder) Insert(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIUserDb)(nil).Insert), in)
}

// ListUsername mocks base method.
func (m *MockIUserDb) ListUsername(tenantID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsername", tenantID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsername indicates an expected call of ListUsername.
func (mr *MockIUserDbMockRecorder) ListUsername(tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsername", reflect.TypeOf((*MockIUserDb)(nil).ListUsername), tenantID)
}

// MarkDeletedByUsername mocks base method.
func (m *MockIUserDb) MarkDeletedByUsername(tenantID, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkDeletedByUsername", tenantID, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkDeletedByUsername indicates an expected call of MarkDeletedByUsername.
func (mr *MockIUserDbMockRecorder) MarkDeletedByUsername(tenantID, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDeletedByUsername", reflect.TypeOf((*MockIUserDb)(nil).MarkDeletedByUsername), tenantID, username)
}
