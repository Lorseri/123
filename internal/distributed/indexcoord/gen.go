//go:build ignore
// +build ignore

package main

import (
	"fmt"
	"os"
	"text/template"
	"time"
)

//go:generate go run gen.go

var methodTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT
// This file is generated by go generate at {{ .Timestamp }}

// Licensed to the LF AI & Data foundation under one
// or more contributor license agreements. See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership. The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package grpcindexcoord

import (
	"context"
	"errors"
	"strings"
	"time"

	"github.com/milvus-io/milvus-proto/go-api/commonpb"
	"github.com/milvus-io/milvus-proto/go-api/milvuspb"
	"github.com/milvus-io/milvus/internal/proto/indexpb"
	"github.com/milvus-io/milvus/internal/proto/internalpb"
	"github.com/milvus-io/milvus/internal/util/errorutil"
	"github.com/milvus-io/milvus/internal/util/retry"
)
{{ range .Methods }}{{with .}}
// {{.MethodComment}}
func (s *Server) {{.MethodName}}(ctx context.Context, request {{.RequestType}}) ({{.ResponseType}}, error) {
	var resp {{.ResponseType}}
	var err error
	retry.Do(ctx, func() error {
		{{- if .SkipRequestParam}}
		resp, err = s.indexcoord.{{.MethodName}}(ctx)
		{{- else}}
		resp, err = s.indexcoord.{{.MethodName}}(ctx, request)
		{{- end}}
		{{- if eq .ResponseType "*commonpb.Status"}}
		if err == nil &&
			resp.GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetReason()), errorutil.StandbyStateReason) {
		{{- else}}
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
		{{- end}}
			return errors.New("indexcoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}
{{end}}{{end}}`))

type methodDef struct {
	MethodName       string
	RequestType      string
	ResponseType     string
	MethodComment    string
	SkipRequestParam bool
}

func main() {
	f, err := os.OpenFile("service_impl.go", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0755)
	if err != nil {
		fmt.Println(err.Error())
		os.Exit(1)
	}
	defer f.Close()

	settings := struct {
		Timestamp time.Time
		Methods   []methodDef
	}{
		Timestamp: time.Now(),
		Methods: []methodDef{
			{
				"CreateIndex", "*indexpb.CreateIndexRequest", "*commonpb.Status", "CreateIndex sends the build index request to IndexCoord", false,
			},
			{
				"GetIndexState", "*indexpb.GetIndexStateRequest", "*indexpb.GetIndexStateResponse", "GetIndexState gets the index states from IndexCoord.\n// Deprecated: use DescribeIndex instead", false,
			},
			{
				"GetSegmentIndexState", "*indexpb.GetSegmentIndexStateRequest", "*indexpb.GetSegmentIndexStateResponse", "GetSegmentIndexState", false,
			},
			{
				"GetIndexInfos", "*indexpb.GetIndexInfoRequest", "*indexpb.GetIndexInfoResponse", "GetIndexInfos gets the index file paths from IndexCoord", false,
			},
			{
				"DescribeIndex", "*indexpb.DescribeIndexRequest", "*indexpb.DescribeIndexResponse", "DescribeIndex gets all indexes of the collection", false,
			},
			{
				"DropIndex", "*indexpb.DropIndexRequest", "*commonpb.Status", "DropIndex sends the drop index request to IndexCoord", false,
			},
			{
				"GetIndexBuildProgress", "*indexpb.GetIndexBuildProgressRequest", "*indexpb.GetIndexBuildProgressResponse", "Deprecated: use DescribeIndex instead", false,
			},
			{
				"ShowConfigurations", "*internalpb.ShowConfigurationsRequest", "*internalpb.ShowConfigurationsResponse", "ShowConfigurations gets specified configurations para of IndexCoord", false,
			},
			{
				"GetMetrics", "*milvuspb.GetMetricsRequest", "*milvuspb.GetMetricsResponse", "GetMetrics gets the metrics info of IndexCoord", false,
			},
		},
	}
	methodTemplate.Execute(f, settings)
}
