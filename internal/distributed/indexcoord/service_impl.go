// Code generated by go generate; DO NOT EDIT
// This file is generated by go generate at 2023-02-16 10:50:45.202559 +0800 CST m=+0.001887126

// Licensed to the LF AI & Data foundation under one
// or more contributor license agreements. See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership. The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package grpcindexcoord

import (
	"context"
	"errors"
	"strings"
	"time"

	"github.com/milvus-io/milvus-proto/go-api/commonpb"
	"github.com/milvus-io/milvus-proto/go-api/milvuspb"
	"github.com/milvus-io/milvus/internal/proto/indexpb"
	"github.com/milvus-io/milvus/internal/proto/internalpb"
	"github.com/milvus-io/milvus/internal/util/errorutil"
	"github.com/milvus-io/milvus/internal/util/retry"
)

// CreateIndex sends the build index request to IndexCoord
func (s *Server) CreateIndex(ctx context.Context, request *indexpb.CreateIndexRequest) (*commonpb.Status, error) {
	var resp *commonpb.Status
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.indexcoord.CreateIndex(ctx, request)
		if err == nil &&
			resp.GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetReason()), errorutil.StandbyStateReason) {
			return errors.New("indexcoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// GetIndexState gets the index states from IndexCoord.
// Deprecated: use DescribeIndex instead
func (s *Server) GetIndexState(ctx context.Context, request *indexpb.GetIndexStateRequest) (*indexpb.GetIndexStateResponse, error) {
	var resp *indexpb.GetIndexStateResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.indexcoord.GetIndexState(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("indexcoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// GetSegmentIndexState
func (s *Server) GetSegmentIndexState(ctx context.Context, request *indexpb.GetSegmentIndexStateRequest) (*indexpb.GetSegmentIndexStateResponse, error) {
	var resp *indexpb.GetSegmentIndexStateResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.indexcoord.GetSegmentIndexState(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("indexcoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// GetIndexInfos gets the index file paths from IndexCoord
func (s *Server) GetIndexInfos(ctx context.Context, request *indexpb.GetIndexInfoRequest) (*indexpb.GetIndexInfoResponse, error) {
	var resp *indexpb.GetIndexInfoResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.indexcoord.GetIndexInfos(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("indexcoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// DescribeIndex gets all indexes of the collection
func (s *Server) DescribeIndex(ctx context.Context, request *indexpb.DescribeIndexRequest) (*indexpb.DescribeIndexResponse, error) {
	var resp *indexpb.DescribeIndexResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.indexcoord.DescribeIndex(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("indexcoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// DropIndex sends the drop index request to IndexCoord
func (s *Server) DropIndex(ctx context.Context, request *indexpb.DropIndexRequest) (*commonpb.Status, error) {
	var resp *commonpb.Status
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.indexcoord.DropIndex(ctx, request)
		if err == nil &&
			resp.GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetReason()), errorutil.StandbyStateReason) {
			return errors.New("indexcoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// Deprecated: use DescribeIndex instead
func (s *Server) GetIndexBuildProgress(ctx context.Context, request *indexpb.GetIndexBuildProgressRequest) (*indexpb.GetIndexBuildProgressResponse, error) {
	var resp *indexpb.GetIndexBuildProgressResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.indexcoord.GetIndexBuildProgress(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("indexcoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// ShowConfigurations gets specified configurations para of IndexCoord
func (s *Server) ShowConfigurations(ctx context.Context, request *internalpb.ShowConfigurationsRequest) (*internalpb.ShowConfigurationsResponse, error) {
	var resp *internalpb.ShowConfigurationsResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.indexcoord.ShowConfigurations(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("indexcoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// GetMetrics gets the metrics info of IndexCoord
func (s *Server) GetMetrics(ctx context.Context, request *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error) {
	var resp *milvuspb.GetMetricsResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.indexcoord.GetMetrics(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("indexcoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}
