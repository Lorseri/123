//go:build ignore
// +build ignore

package main

import (
	"fmt"
	"os"
	"text/template"
	"time"
)

//go:generate go run gen.go

var methodTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT
// This file is generated by go generate at {{ .Timestamp }}

// Licensed to the LF AI & Data foundation under one
// or more contributor license agreements. See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership. The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package grpcrootcoord

import (
	"context"
	"errors"
	"strings"
	"time"

	"github.com/milvus-io/milvus-proto/go-api/commonpb"
	"github.com/milvus-io/milvus-proto/go-api/milvuspb"
	"github.com/milvus-io/milvus/internal/proto/internalpb"
	"github.com/milvus-io/milvus/internal/proto/proxypb"
	"github.com/milvus-io/milvus/internal/proto/rootcoordpb"
	"github.com/milvus-io/milvus/internal/util/errorutil"
	"github.com/milvus-io/milvus/internal/util/retry"
)
{{ range .Methods }}{{with .}}
// {{.MethodComment}}
func (s *Server) {{.MethodName}}(ctx context.Context, request {{.RequestType}}) ({{.ResponseType}}, error) {
	var resp {{.ResponseType}}
	var err error
	retry.Do(ctx, func() error {
		{{- if .SkipRequestParam}}
		resp, err = s.rootCoord.{{.MethodName}}(ctx)
		{{- else}}
		resp, err = s.rootCoord.{{.MethodName}}(ctx, request)
		{{- end}}
		{{- if eq .ResponseType "*commonpb.Status"}}
		if err == nil &&
			resp.GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetReason()), errorutil.StandbyStateReason) {
		{{- else}}
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
		{{- end}}
			return errors.New("rootcoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}
{{end}}{{end}}`))

type methodDef struct {
	MethodName       string
	RequestType      string
	ResponseType     string
	MethodComment    string
	SkipRequestParam bool
}

func main() {
	f, err := os.OpenFile("service_impl.go", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0755)
	if err != nil {
		fmt.Println(err.Error())
		os.Exit(1)
	}
	defer f.Close()

	settings := struct {
		Timestamp time.Time
		Methods   []methodDef
	}{
		Timestamp: time.Now(),
		Methods: []methodDef{
			{
				"GetComponentStates", "*milvuspb.GetComponentStatesRequest", "*milvuspb.ComponentStates", "GetComponentStates gets the component states of RootCoord.", true,
			},
			{
				"GetTimeTickChannel", "*internalpb.GetTimeTickChannelRequest", "*milvuspb.StringResponse", "GetTimeTickChannel receiver time tick from proxy service, and put it into this channel", true,
			},
			{
				"GetStatisticsChannel", "*internalpb.GetStatisticsChannelRequest", "*milvuspb.StringResponse", "GetStatisticsChannel just define a channel, not used currently", true,
			},
			{
				"CreateCollection", "*milvuspb.CreateCollectionRequest", "*commonpb.Status", "CreateCollection creates a collection", false,
			},

			{
				"DropCollection", "*milvuspb.DropCollectionRequest", "*commonpb.Status", "DropCollection drops a collection", false,
			},
			{
				"HasCollection", "*milvuspb.HasCollectionRequest", "*milvuspb.BoolResponse", "HasCollection checks whether a collection is created", false,
			},
			{
				"DescribeCollection", "*milvuspb.DescribeCollectionRequest", "*milvuspb.DescribeCollectionResponse", "DescribeCollection gets meta info of a collection", false,
			},
			{
				"DescribeCollectionInternal", "*milvuspb.DescribeCollectionRequest", "*milvuspb.DescribeCollectionResponse", "DescribeCollectionInternal gets meta info of a collection", false,
			},
			{
				"ShowCollections", "*milvuspb.ShowCollectionsRequest", "*milvuspb.ShowCollectionsResponse", "ShowCollections gets all collections", false,
			},
			{
				"CreatePartition", "*milvuspb.CreatePartitionRequest", "*commonpb.Status", "CreatePartition creates a partition in a collection", false,
			},
			{
				"DropPartition", "*milvuspb.DropPartitionRequest", "*commonpb.Status", "DropPartition drops the specified partition", false,
			},
			{
				"HasPartition", "*milvuspb.HasPartitionRequest", "*milvuspb.BoolResponse", "HasPartition checks whether a partition is created", false,
			},
			{
				"ShowPartitions", "*milvuspb.ShowPartitionsRequest", "*milvuspb.ShowPartitionsResponse", "ShowPartitions gets all partitions for the specified collection", false,
			},
			{
				"ShowPartitionsInternal", "*milvuspb.ShowPartitionsRequest", "*milvuspb.ShowPartitionsResponse", "ShowPartitionsInternal gets all partitions for the specified collection.", false,
			},

			{
				"AllocTimestamp", "*rootcoordpb.AllocTimestampRequest", "*rootcoordpb.AllocTimestampResponse", "AllocTimestamp global timestamp allocator", false,
			},
			{
				"AllocID", "*rootcoordpb.AllocIDRequest", "*rootcoordpb.AllocIDResponse", "AllocID allocates an ID", false,
			},
			{
				"UpdateChannelTimeTick", "*internalpb.ChannelTimeTickMsg", "*commonpb.Status", "UpdateChannelTimeTick used to handle ChannelTimeTickMsg", false,
			},
			{
				"ShowSegments", "*milvuspb.ShowSegmentsRequest", "*milvuspb.ShowSegmentsResponse", "ShowSegments gets all segments", false,
			},
			{
				"InvalidateCollectionMetaCache", "*proxypb.InvalidateCollMetaCacheRequest", "*commonpb.Status", "InvalidateCollectionMetaCache notifies RootCoord to release the collection cache in, false Proxies", false,
			},
			{
				"ShowConfigurations", "*internalpb.ShowConfigurationsRequest", "*internalpb.ShowConfigurationsResponse", "ShowConfigurations gets specified configurations para of RootCoord", false,
			},
			{
				"GetMetrics", "*milvuspb.GetMetricsRequest", "*milvuspb.GetMetricsResponse", "GetMetrics gets the metrics of RootCoord", false,
			},
			{
				"Import", "*milvuspb.ImportRequest", "*milvuspb.ImportResponse", "Import data files(json, numpy, etc.) on MinIO/S3 storage, read and parse them into sealed segments", false,
			},
			{
				"GetImportState", "*milvuspb.GetImportStateRequest", "*milvuspb.GetImportStateResponse", "Check import task state from datanode", false,
			},
			{
				"ListImportTasks", "*milvuspb.ListImportTasksRequest", "*milvuspb.ListImportTasksResponse", "Returns id array of all import tasks", false,
			},
			{
				"ReportImport", "*rootcoordpb.ImportResult", "*commonpb.Status", "Report impot task state to datacoord", false,
			},
			{
				"CreateCredential", "*internalpb.CredentialInfo", "*commonpb.Status", "CreateCredential", false,
			},
			{
				"GetCredential", "*rootcoordpb.GetCredentialRequest", "*rootcoordpb.GetCredentialResponse", "GetCredential", false,
			},
			{
				"UpdateCredential", "*internalpb.CredentialInfo", "*commonpb.Status", "UpdateCredential", false,
			},
			{
				"DeleteCredential", "*milvuspb.DeleteCredentialRequest", "*commonpb.Status", "DeleteCredential", false,
			},
			{
				"ListCredUsers", "*milvuspb.ListCredUsersRequest", "*milvuspb.ListCredUsersResponse", "ListCredUsers", false,
			},
			{
				"CreateRole", "*milvuspb.CreateRoleRequest", "*commonpb.Status", "CreateRole", false,
			},
			{
				"DropRole", "*milvuspb.DropRoleRequest", "*commonpb.Status", "DropRole", false,
			},
			{
				"OperateUserRole", "*milvuspb.OperateUserRoleRequest", "*commonpb.Status", "OperateUserRole", false,
			},
			{
				"SelectRole", "*milvuspb.SelectRoleRequest", "*milvuspb.SelectRoleResponse", "SelectRole", false,
			},
			{
				"SelectUser", "*milvuspb.SelectUserRequest", "*milvuspb.SelectUserResponse", "SelectUser", false,
			},
			{
				"OperatePrivilege", "*milvuspb.OperatePrivilegeRequest", "*commonpb.Status", "OperatePrivilege", false,
			},
			{
				"SelectGrant", "*milvuspb.SelectGrantRequest", "*milvuspb.SelectGrantResponse", "SelectGrant", false,
			},
			{
				"ListPolicy", "*internalpb.ListPolicyRequest", "*internalpb.ListPolicyResponse", "ListPolicy", false,
			},
			{
				"AlterCollection", "*milvuspb.AlterCollectionRequest", "*commonpb.Status", "AlterCollection", false,
			},
			{
				"CreateAlias", "*milvuspb.CreateAliasRequest", "*commonpb.Status", "CreateAlias", false,
			},
			{
				"DropAlias", "*milvuspb.DropAliasRequest", "*commonpb.Status", "DropAlias", false,
			},
			{
				"AlterAlias", "*milvuspb.AlterAliasRequest", "*commonpb.Status", "AlterAlias", false,
			},
		},
	}
	methodTemplate.Execute(f, settings)
}
