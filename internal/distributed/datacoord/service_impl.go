// Code generated by go generate; DO NOT EDIT
// This file is generated by go generate at 2023-02-16 13:57:52.88703 +0800 CST m=+0.001901543

// Licensed to the LF AI & Data foundation under one
// or more contributor license agreements. See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership. The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package grpcdatacoord

import (
	"context"
	"errors"
	"strings"
	"time"

	"github.com/milvus-io/milvus-proto/go-api/commonpb"
	"github.com/milvus-io/milvus-proto/go-api/milvuspb"
	"github.com/milvus-io/milvus/internal/proto/datapb"
	"github.com/milvus-io/milvus/internal/proto/internalpb"
	"github.com/milvus-io/milvus/internal/util/errorutil"
	"github.com/milvus-io/milvus/internal/util/retry"
)

// GetSegmentInfo gets segment information according to segment id
func (s *Server) GetSegmentInfo(ctx context.Context, request *datapb.GetSegmentInfoRequest) (*datapb.GetSegmentInfoResponse, error) {
	var resp *datapb.GetSegmentInfoResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.GetSegmentInfo(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// Flush flushes a collection's data
func (s *Server) Flush(ctx context.Context, request *datapb.FlushRequest) (*datapb.FlushResponse, error) {
	var resp *datapb.FlushResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.Flush(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// AssignSegmentID requests to allocate segment space for insert
func (s *Server) AssignSegmentID(ctx context.Context, request *datapb.AssignSegmentIDRequest) (*datapb.AssignSegmentIDResponse, error) {
	var resp *datapb.AssignSegmentIDResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.AssignSegmentID(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// GetSegmentStates gets states of segments
func (s *Server) GetSegmentStates(ctx context.Context, request *datapb.GetSegmentStatesRequest) (*datapb.GetSegmentStatesResponse, error) {
	var resp *datapb.GetSegmentStatesResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.GetSegmentStates(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// GetInsertBinlogPaths gets insert binlog paths of a segment
func (s *Server) GetInsertBinlogPaths(ctx context.Context, request *datapb.GetInsertBinlogPathsRequest) (*datapb.GetInsertBinlogPathsResponse, error) {
	var resp *datapb.GetInsertBinlogPathsResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.GetInsertBinlogPaths(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// GetCollectionStatistics gets statistics of a collection
func (s *Server) GetCollectionStatistics(ctx context.Context, request *datapb.GetCollectionStatisticsRequest) (*datapb.GetCollectionStatisticsResponse, error) {
	var resp *datapb.GetCollectionStatisticsResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.GetCollectionStatistics(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// GetPartitionStatistics gets statistics of a partition
func (s *Server) GetPartitionStatistics(ctx context.Context, request *datapb.GetPartitionStatisticsRequest) (*datapb.GetPartitionStatisticsResponse, error) {
	var resp *datapb.GetPartitionStatisticsResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.GetPartitionStatistics(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// GetSegmentInfoChannel gets channel to which datacoord sends segment information
func (s *Server) GetSegmentInfoChannel(ctx context.Context, request *datapb.GetSegmentInfoChannelRequest) (*milvuspb.StringResponse, error) {
	var resp *milvuspb.StringResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.GetSegmentInfoChannel(ctx)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// SaveBinlogPaths implement DataCoordServer, saves segment, collection binlog according to datanode request
func (s *Server) SaveBinlogPaths(ctx context.Context, request *datapb.SaveBinlogPathsRequest) (*commonpb.Status, error) {
	var resp *commonpb.Status
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.SaveBinlogPaths(ctx, request)
		if err == nil &&
			resp.GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// GetRecoveryInfo gets information for recovering channels
func (s *Server) GetRecoveryInfo(ctx context.Context, request *datapb.GetRecoveryInfoRequest) (*datapb.GetRecoveryInfoResponse, error) {
	var resp *datapb.GetRecoveryInfoResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.GetRecoveryInfo(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// GetFlushedSegments get all flushed segments of a partition
func (s *Server) GetFlushedSegments(ctx context.Context, request *datapb.GetFlushedSegmentsRequest) (*datapb.GetFlushedSegmentsResponse, error) {
	var resp *datapb.GetFlushedSegmentsResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.GetFlushedSegments(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// GetSegmentsByStates get all segments of a partition by given states
func (s *Server) GetSegmentsByStates(ctx context.Context, request *datapb.GetSegmentsByStatesRequest) (*datapb.GetSegmentsByStatesResponse, error) {
	var resp *datapb.GetSegmentsByStatesResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.GetSegmentsByStates(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// ShowConfigurations gets specified configurations para of DataCoord
func (s *Server) ShowConfigurations(ctx context.Context, request *internalpb.ShowConfigurationsRequest) (*internalpb.ShowConfigurationsResponse, error) {
	var resp *internalpb.ShowConfigurationsResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.ShowConfigurations(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// GetMetrics gets metrics of data coordinator and datanodes
func (s *Server) GetMetrics(ctx context.Context, request *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error) {
	var resp *milvuspb.GetMetricsResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.GetMetrics(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// ManualCompaction triggers a compaction for a collection
func (s *Server) ManualCompaction(ctx context.Context, request *milvuspb.ManualCompactionRequest) (*milvuspb.ManualCompactionResponse, error) {
	var resp *milvuspb.ManualCompactionResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.ManualCompaction(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// GetCompactionState gets the state of a compaction
func (s *Server) GetCompactionState(ctx context.Context, request *milvuspb.GetCompactionStateRequest) (*milvuspb.GetCompactionStateResponse, error) {
	var resp *milvuspb.GetCompactionStateResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.GetCompactionState(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// GetCompactionStateWithPlans gets the state of a compaction by plan
func (s *Server) GetCompactionStateWithPlans(ctx context.Context, request *milvuspb.GetCompactionPlansRequest) (*milvuspb.GetCompactionPlansResponse, error) {
	var resp *milvuspb.GetCompactionPlansResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.GetCompactionStateWithPlans(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// WatchChannels starts watch channels by give request
func (s *Server) WatchChannels(ctx context.Context, request *datapb.WatchChannelsRequest) (*datapb.WatchChannelsResponse, error) {
	var resp *datapb.WatchChannelsResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.WatchChannels(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// GetFlushState gets the flush state of multiple segments
func (s *Server) GetFlushState(ctx context.Context, request *milvuspb.GetFlushStateRequest) (*milvuspb.GetFlushStateResponse, error) {
	var resp *milvuspb.GetFlushStateResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.GetFlushState(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// DropVirtualChannel drop virtual channel in datacoord
func (s *Server) DropVirtualChannel(ctx context.Context, request *datapb.DropVirtualChannelRequest) (*datapb.DropVirtualChannelResponse, error) {
	var resp *datapb.DropVirtualChannelResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.DropVirtualChannel(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// SetSegmentState sets the state of a segment
func (s *Server) SetSegmentState(ctx context.Context, request *datapb.SetSegmentStateRequest) (*datapb.SetSegmentStateResponse, error) {
	var resp *datapb.SetSegmentStateResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.SetSegmentState(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// Import data files(json, numpy, etc.) on MinIO/S3 storage, read and parse them into sealed segments
func (s *Server) Import(ctx context.Context, request *datapb.ImportTaskRequest) (*datapb.ImportTaskResponse, error) {
	var resp *datapb.ImportTaskResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.Import(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// UpdateSegmentStatistics is the dataCoord service caller of UpdateSegmentStatistics
func (s *Server) UpdateSegmentStatistics(ctx context.Context, request *datapb.UpdateSegmentStatisticsRequest) (*commonpb.Status, error) {
	var resp *commonpb.Status
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.UpdateSegmentStatistics(ctx, request)
		if err == nil &&
			resp.GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// UpdateChannelCheckpoint updates channel checkpoint in dataCoord
func (s *Server) UpdateChannelCheckpoint(ctx context.Context, request *datapb.UpdateChannelCheckpointRequest) (*commonpb.Status, error) {
	var resp *commonpb.Status
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.UpdateChannelCheckpoint(ctx, request)
		if err == nil &&
			resp.GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// AcquireSegmentLock acquire the reference lock of the segments
func (s *Server) AcquireSegmentLock(ctx context.Context, request *datapb.AcquireSegmentLockRequest) (*commonpb.Status, error) {
	var resp *commonpb.Status
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.AcquireSegmentLock(ctx, request)
		if err == nil &&
			resp.GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// ReleaseSegmentLock release the reference lock of the segments
func (s *Server) ReleaseSegmentLock(ctx context.Context, request *datapb.ReleaseSegmentLockRequest) (*commonpb.Status, error) {
	var resp *commonpb.Status
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.ReleaseSegmentLock(ctx, request)
		if err == nil &&
			resp.GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// SaveImportSegment saves the import segment binlog paths data and then looks for the right DataNode to add the
// segment to that DataNode
func (s *Server) SaveImportSegment(ctx context.Context, request *datapb.SaveImportSegmentRequest) (*commonpb.Status, error) {
	var resp *commonpb.Status
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.SaveImportSegment(ctx, request)
		if err == nil &&
			resp.GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// UnsetIsImportingState is the distributed caller of UnsetIsImportingState
func (s *Server) UnsetIsImportingState(ctx context.Context, request *datapb.UnsetIsImportingStateRequest) (*commonpb.Status, error) {
	var resp *commonpb.Status
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.UnsetIsImportingState(ctx, request)
		if err == nil &&
			resp.GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// MarkSegmentsDropped is the distributed caller of MarkSegmentsDropped
func (s *Server) MarkSegmentsDropped(ctx context.Context, request *datapb.MarkSegmentsDroppedRequest) (*commonpb.Status, error) {
	var resp *commonpb.Status
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.MarkSegmentsDropped(ctx, request)
		if err == nil &&
			resp.GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// BroadcastAlteredCollection
func (s *Server) BroadcastAlteredCollection(ctx context.Context, request *datapb.AlterCollectionRequest) (*commonpb.Status, error) {
	var resp *commonpb.Status
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.BroadcastAlteredCollection(ctx, request)
		if err == nil &&
			resp.GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// GcConfirm
func (s *Server) GcConfirm(ctx context.Context, request *datapb.GcConfirmRequest) (*datapb.GcConfirmResponse, error) {
	var resp *datapb.GcConfirmResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.dataCoord.GcConfirm(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("dataCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}
