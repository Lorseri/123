// Code generated by go generate; DO NOT EDIT
// This file is generated by go generate at 2023-02-16 10:50:56.030128 +0800 CST m=+0.002030167

// Licensed to the LF AI & Data foundation under one
// or more contributor license agreements. See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership. The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package grpcquerycoord

import (
	"context"
	"errors"
	"strings"
	"time"

	"github.com/milvus-io/milvus-proto/go-api/commonpb"
	"github.com/milvus-io/milvus-proto/go-api/milvuspb"
	"github.com/milvus-io/milvus/internal/proto/internalpb"
	"github.com/milvus-io/milvus/internal/proto/querypb"
	"github.com/milvus-io/milvus/internal/util/errorutil"
	"github.com/milvus-io/milvus/internal/util/retry"
)

// ShowCollections shows the collections in the QueryCoord
func (s *Server) ShowCollections(ctx context.Context, request *querypb.ShowCollectionsRequest) (*querypb.ShowCollectionsResponse, error) {
	var resp *querypb.ShowCollectionsResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.queryCoord.ShowCollections(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("queryCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// LoadCollection loads the data of the specified collection in QueryCoord
func (s *Server) LoadCollection(ctx context.Context, request *querypb.LoadCollectionRequest) (*commonpb.Status, error) {
	var resp *commonpb.Status
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.queryCoord.LoadCollection(ctx, request)
		if err == nil &&
			resp.GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetReason()), errorutil.StandbyStateReason) {
			return errors.New("queryCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// ReleaseCollection releases the data of the specified collection in QueryCoord
func (s *Server) ReleaseCollection(ctx context.Context, request *querypb.ReleaseCollectionRequest) (*commonpb.Status, error) {
	var resp *commonpb.Status
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.queryCoord.ReleaseCollection(ctx, request)
		if err == nil &&
			resp.GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetReason()), errorutil.StandbyStateReason) {
			return errors.New("queryCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// ShowPartitions shows the partitions in the QueryCoord
func (s *Server) ShowPartitions(ctx context.Context, request *querypb.ShowPartitionsRequest) (*querypb.ShowPartitionsResponse, error) {
	var resp *querypb.ShowPartitionsResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.queryCoord.ShowPartitions(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("queryCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// GetPartitionStates gets the states of the specified partition
func (s *Server) GetPartitionStates(ctx context.Context, request *querypb.GetPartitionStatesRequest) (*querypb.GetPartitionStatesResponse, error) {
	var resp *querypb.GetPartitionStatesResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.queryCoord.GetPartitionStates(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("queryCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// LoadPartitions loads the data of the specified partition in QueryCoord
func (s *Server) LoadPartitions(ctx context.Context, request *querypb.LoadPartitionsRequest) (*commonpb.Status, error) {
	var resp *commonpb.Status
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.queryCoord.LoadPartitions(ctx, request)
		if err == nil &&
			resp.GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetReason()), errorutil.StandbyStateReason) {
			return errors.New("queryCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// ReleasePartitions releases the data of the specified partition in QueryCoord
func (s *Server) ReleasePartitions(ctx context.Context, request *querypb.ReleasePartitionsRequest) (*commonpb.Status, error) {
	var resp *commonpb.Status
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.queryCoord.ReleasePartitions(ctx, request)
		if err == nil &&
			resp.GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetReason()), errorutil.StandbyStateReason) {
			return errors.New("queryCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// GetSegmentInfo gets the information of the specified segment from QueryCoord
func (s *Server) GetSegmentInfo(ctx context.Context, request *querypb.GetSegmentInfoRequest) (*querypb.GetSegmentInfoResponse, error) {
	var resp *querypb.GetSegmentInfoResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.queryCoord.GetSegmentInfo(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("queryCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// LoadBalance migrate the sealed segments on the source node to the dst nodes
func (s *Server) LoadBalance(ctx context.Context, request *querypb.LoadBalanceRequest) (*commonpb.Status, error) {
	var resp *commonpb.Status
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.queryCoord.LoadBalance(ctx, request)
		if err == nil &&
			resp.GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetReason()), errorutil.StandbyStateReason) {
			return errors.New("queryCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// ShowConfigurations gets specified configurations para of QueryCoord
func (s *Server) ShowConfigurations(ctx context.Context, request *internalpb.ShowConfigurationsRequest) (*internalpb.ShowConfigurationsResponse, error) {
	var resp *internalpb.ShowConfigurationsResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.queryCoord.ShowConfigurations(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("queryCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// GetMetrics gets the metrics information of QueryCoord
func (s *Server) GetMetrics(ctx context.Context, request *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error) {
	var resp *milvuspb.GetMetricsResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.queryCoord.GetMetrics(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("queryCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// GetReplicas returns the shard leaders of a certain collection
func (s *Server) GetReplicas(ctx context.Context, request *milvuspb.GetReplicasRequest) (*milvuspb.GetReplicasResponse, error) {
	var resp *milvuspb.GetReplicasResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.queryCoord.GetReplicas(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("queryCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// GetShardLeaders returns the shard leaders of a certain collection
func (s *Server) GetShardLeaders(ctx context.Context, request *querypb.GetShardLeadersRequest) (*querypb.GetShardLeadersResponse, error) {
	var resp *querypb.GetShardLeadersResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.queryCoord.GetShardLeaders(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("queryCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// CreateResourceGroup
func (s *Server) CreateResourceGroup(ctx context.Context, request *milvuspb.CreateResourceGroupRequest) (*commonpb.Status, error) {
	var resp *commonpb.Status
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.queryCoord.CreateResourceGroup(ctx, request)
		if err == nil &&
			resp.GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetReason()), errorutil.StandbyStateReason) {
			return errors.New("queryCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// DropResourceGroup
func (s *Server) DropResourceGroup(ctx context.Context, request *milvuspb.DropResourceGroupRequest) (*commonpb.Status, error) {
	var resp *commonpb.Status
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.queryCoord.DropResourceGroup(ctx, request)
		if err == nil &&
			resp.GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetReason()), errorutil.StandbyStateReason) {
			return errors.New("queryCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// TransferNode
func (s *Server) TransferNode(ctx context.Context, request *milvuspb.TransferNodeRequest) (*commonpb.Status, error) {
	var resp *commonpb.Status
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.queryCoord.TransferNode(ctx, request)
		if err == nil &&
			resp.GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetReason()), errorutil.StandbyStateReason) {
			return errors.New("queryCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// TransferReplica
func (s *Server) TransferReplica(ctx context.Context, request *querypb.TransferReplicaRequest) (*commonpb.Status, error) {
	var resp *commonpb.Status
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.queryCoord.TransferReplica(ctx, request)
		if err == nil &&
			resp.GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetReason()), errorutil.StandbyStateReason) {
			return errors.New("queryCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// ListResourceGroups
func (s *Server) ListResourceGroups(ctx context.Context, request *milvuspb.ListResourceGroupsRequest) (*milvuspb.ListResourceGroupsResponse, error) {
	var resp *milvuspb.ListResourceGroupsResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.queryCoord.ListResourceGroups(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("queryCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}

// DescribeResourceGroup
func (s *Server) DescribeResourceGroup(ctx context.Context, request *querypb.DescribeResourceGroupRequest) (*querypb.DescribeResourceGroupResponse, error) {
	var resp *querypb.DescribeResourceGroupResponse
	var err error
	retry.Do(ctx, func() error {
		resp, err = s.queryCoord.DescribeResourceGroup(ctx, request)
		if err == nil &&
			resp.GetStatus().GetErrorCode() == commonpb.ErrorCode_UnexpectedError &&
			strings.Contains(strings.ToLower(resp.GetStatus().GetReason()), errorutil.StandbyStateReason) {
			return errors.New("queryCoord is switching from standby to active mode, retry request")
		} else {
			return nil
		}
	}, retry.Attempts(600), retry.Sleep(time.Millisecond*500), retry.MaxSleepTime(5*time.Second))
	return resp, err
}
