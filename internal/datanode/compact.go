// Licensed to the LF AI & Data foundation under one
// or more contributor license agreements. See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership. The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package datanode

type iterator interface {
	next()
	hasNext() bool
}

type blobLoader interface {
	// load downloads binlogs from S3 for paths given. Note that the paths are 1 group of
	//   binlog paths generated by 1 `Serialize`.
	// load can download insert-binlogs, stats-binlogs, and delta-binlogs.
	load(paths []string) ([]*Blob, error)

	// upload generates insert-binlogs, stats-binlogs, and delta-binlog from data,
	//  then uploads the blobs into blob storage.
	// We don't care about the stats-binlogs, because stats-logs are generated from InsertData.
	upload(iData *InsertData, dData *DeleteData) error

	// drop drops the binlog files generated by compaction if uploaded but enventually failed.
	drop(paths []string) error
}

type compactor interface {
	// compact uses mergeIterator to merge data from insertIterator and deltaIterator
	compact(mergeItr, insertMergeItr, deltaMergeItr iterator) (*InsertData, *DeleteData, error)

	// mergeInsertIterator merges several insert iterators into an insertMergeIterator
	mergeInsertItr(insertItrs []iterator) (iterator, error)

	// mergeDeltaIterator merges several delta iterators into an deltaMergeIterator
	mergeDeltaItr(deltaItrs []iterator) (iterator, error)
}
