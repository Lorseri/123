// Code generated by mockery v2.32.4. DO NOT EDIT.

package balance

import (
	meta "github.com/milvus-io/milvus/internal/querycoordv2/meta"
	mock "github.com/stretchr/testify/mock"
)

// MockBalancer is an autogenerated mock type for the Balance type
type MockBalancer struct {
	mock.Mock
}

type MockBalancer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBalancer) EXPECT() *MockBalancer_Expecter {
	return &MockBalancer_Expecter{mock: &_m.Mock}
}

// BalanceReplica provides a mock function with given fields: replica
func (_m *MockBalancer) BalanceReplica(replica *meta.Replica) ([]SegmentAssignPlan, []ChannelAssignPlan) {
	ret := _m.Called(replica)

	var r0 []SegmentAssignPlan
	var r1 []ChannelAssignPlan
	if rf, ok := ret.Get(0).(func(*meta.Replica) ([]SegmentAssignPlan, []ChannelAssignPlan)); ok {
		return rf(replica)
	}
	if rf, ok := ret.Get(0).(func(*meta.Replica) []SegmentAssignPlan); ok {
		r0 = rf(replica)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]SegmentAssignPlan)
		}
	}

	if rf, ok := ret.Get(1).(func(*meta.Replica) []ChannelAssignPlan); ok {
		r1 = rf(replica)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]ChannelAssignPlan)
		}
	}

	return r0, r1
}

// MockBalancer_BalanceReplica_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BalanceReplica'
type MockBalancer_BalanceReplica_Call struct {
	*mock.Call
}

// BalanceReplica is a helper method to define mock.On call
//   - replica *meta.Replica
func (_e *MockBalancer_Expecter) BalanceReplica(replica interface{}) *MockBalancer_BalanceReplica_Call {
	return &MockBalancer_BalanceReplica_Call{Call: _e.mock.On("BalanceReplica", replica)}
}

func (_c *MockBalancer_BalanceReplica_Call) Run(run func(replica *meta.Replica)) *MockBalancer_BalanceReplica_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*meta.Replica))
	})
	return _c
}

func (_c *MockBalancer_BalanceReplica_Call) Return(_a0 []SegmentAssignPlan, _a1 []ChannelAssignPlan) *MockBalancer_BalanceReplica_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBalancer_BalanceReplica_Call) RunAndReturn(run func(*meta.Replica) ([]SegmentAssignPlan, []ChannelAssignPlan)) *MockBalancer_BalanceReplica_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicy provides a mock function with given fields:
func (_m *MockBalancer) GetPolicy() BalancePolicy {
	ret := _m.Called()

	var r0 BalancePolicy
	if rf, ok := ret.Get(0).(func() BalancePolicy); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(BalancePolicy)
		}
	}

	return r0
}

// MockBalancer_GetPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicy'
type MockBalancer_GetPolicy_Call struct {
	*mock.Call
}

// GetPolicy is a helper method to define mock.On call
func (_e *MockBalancer_Expecter) GetPolicy() *MockBalancer_GetPolicy_Call {
	return &MockBalancer_GetPolicy_Call{Call: _e.mock.On("GetPolicy")}
}

func (_c *MockBalancer_GetPolicy_Call) Run(run func()) *MockBalancer_GetPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBalancer_GetPolicy_Call) Return(_a0 BalancePolicy) *MockBalancer_GetPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBalancer_GetPolicy_Call) RunAndReturn(run func() BalancePolicy) *MockBalancer_GetPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBalancer creates a new instance of MockBalancer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBalancer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBalancer {
	mock := &MockBalancer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
