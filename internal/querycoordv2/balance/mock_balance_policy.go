// Code generated by mockery v2.32.4. DO NOT EDIT.

package balance

import (
	meta "github.com/milvus-io/milvus/internal/querycoordv2/meta"
	mock "github.com/stretchr/testify/mock"
)

// MockBalancePolicy is an autogenerated mock type for the BalancePolicy type
type MockBalancePolicy struct {
	mock.Mock
}

type MockBalancePolicy_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBalancePolicy) EXPECT() *MockBalancePolicy_Expecter {
	return &MockBalancePolicy_Expecter{mock: &_m.Mock}
}

// AssignChannel provides a mock function with given fields: channels, nodes
func (_m *MockBalancePolicy) AssignChannel(channels []*meta.DmChannel, nodes []int64) []ChannelAssignPlan {
	ret := _m.Called(channels, nodes)

	var r0 []ChannelAssignPlan
	if rf, ok := ret.Get(0).(func([]*meta.DmChannel, []int64) []ChannelAssignPlan); ok {
		r0 = rf(channels, nodes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ChannelAssignPlan)
		}
	}

	return r0
}

// MockBalancePolicy_AssignChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignChannel'
type MockBalancePolicy_AssignChannel_Call struct {
	*mock.Call
}

// AssignChannel is a helper method to define mock.On call
//   - channels []*meta.DmChannel
//   - nodes []int64
func (_e *MockBalancePolicy_Expecter) AssignChannel(channels interface{}, nodes interface{}) *MockBalancePolicy_AssignChannel_Call {
	return &MockBalancePolicy_AssignChannel_Call{Call: _e.mock.On("AssignChannel", channels, nodes)}
}

func (_c *MockBalancePolicy_AssignChannel_Call) Run(run func(channels []*meta.DmChannel, nodes []int64)) *MockBalancePolicy_AssignChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*meta.DmChannel), args[1].([]int64))
	})
	return _c
}

func (_c *MockBalancePolicy_AssignChannel_Call) Return(_a0 []ChannelAssignPlan) *MockBalancePolicy_AssignChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBalancePolicy_AssignChannel_Call) RunAndReturn(run func([]*meta.DmChannel, []int64) []ChannelAssignPlan) *MockBalancePolicy_AssignChannel_Call {
	_c.Call.Return(run)
	return _c
}

// AssignSegment provides a mock function with given fields: collectionID, segments, nodes
func (_m *MockBalancePolicy) AssignSegment(collectionID int64, segments []*meta.Segment, nodes []int64) []SegmentAssignPlan {
	ret := _m.Called(collectionID, segments, nodes)

	var r0 []SegmentAssignPlan
	if rf, ok := ret.Get(0).(func(int64, []*meta.Segment, []int64) []SegmentAssignPlan); ok {
		r0 = rf(collectionID, segments, nodes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]SegmentAssignPlan)
		}
	}

	return r0
}

// MockBalancePolicy_AssignSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignSegment'
type MockBalancePolicy_AssignSegment_Call struct {
	*mock.Call
}

// AssignSegment is a helper method to define mock.On call
//   - collectionID int64
//   - segments []*meta.Segment
//   - nodes []int64
func (_e *MockBalancePolicy_Expecter) AssignSegment(collectionID interface{}, segments interface{}, nodes interface{}) *MockBalancePolicy_AssignSegment_Call {
	return &MockBalancePolicy_AssignSegment_Call{Call: _e.mock.On("AssignSegment", collectionID, segments, nodes)}
}

func (_c *MockBalancePolicy_AssignSegment_Call) Run(run func(collectionID int64, segments []*meta.Segment, nodes []int64)) *MockBalancePolicy_AssignSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].([]*meta.Segment), args[2].([]int64))
	})
	return _c
}

func (_c *MockBalancePolicy_AssignSegment_Call) Return(_a0 []SegmentAssignPlan) *MockBalancePolicy_AssignSegment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBalancePolicy_AssignSegment_Call) RunAndReturn(run func(int64, []*meta.Segment, []int64) []SegmentAssignPlan) *MockBalancePolicy_AssignSegment_Call {
	_c.Call.Return(run)
	return _c
}

// getAverageWithChannel provides a mock function with given fields: collectionID, nodes
func (_m *MockBalancePolicy) getAverageWithChannel(collectionID int64, nodes []int64) int {
	ret := _m.Called(collectionID, nodes)

	var r0 int
	if rf, ok := ret.Get(0).(func(int64, []int64) int); ok {
		r0 = rf(collectionID, nodes)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockBalancePolicy_getAverageWithChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getAverageWithChannel'
type MockBalancePolicy_getAverageWithChannel_Call struct {
	*mock.Call
}

// getAverageWithChannel is a helper method to define mock.On call
//   - collectionID int64
//   - nodes []int64
func (_e *MockBalancePolicy_Expecter) getAverageWithChannel(collectionID interface{}, nodes interface{}) *MockBalancePolicy_getAverageWithChannel_Call {
	return &MockBalancePolicy_getAverageWithChannel_Call{Call: _e.mock.On("getAverageWithChannel", collectionID, nodes)}
}

func (_c *MockBalancePolicy_getAverageWithChannel_Call) Run(run func(collectionID int64, nodes []int64)) *MockBalancePolicy_getAverageWithChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].([]int64))
	})
	return _c
}

func (_c *MockBalancePolicy_getAverageWithChannel_Call) Return(_a0 int) *MockBalancePolicy_getAverageWithChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBalancePolicy_getAverageWithChannel_Call) RunAndReturn(run func(int64, []int64) int) *MockBalancePolicy_getAverageWithChannel_Call {
	_c.Call.Return(run)
	return _c
}

// getAverageWithSegment provides a mock function with given fields: collectionID, nodes
func (_m *MockBalancePolicy) getAverageWithSegment(collectionID int64, nodes []int64) int {
	ret := _m.Called(collectionID, nodes)

	var r0 int
	if rf, ok := ret.Get(0).(func(int64, []int64) int); ok {
		r0 = rf(collectionID, nodes)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockBalancePolicy_getAverageWithSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getAverageWithSegment'
type MockBalancePolicy_getAverageWithSegment_Call struct {
	*mock.Call
}

// getAverageWithSegment is a helper method to define mock.On call
//   - collectionID int64
//   - nodes []int64
func (_e *MockBalancePolicy_Expecter) getAverageWithSegment(collectionID interface{}, nodes interface{}) *MockBalancePolicy_getAverageWithSegment_Call {
	return &MockBalancePolicy_getAverageWithSegment_Call{Call: _e.mock.On("getAverageWithSegment", collectionID, nodes)}
}

func (_c *MockBalancePolicy_getAverageWithSegment_Call) Run(run func(collectionID int64, nodes []int64)) *MockBalancePolicy_getAverageWithSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].([]int64))
	})
	return _c
}

func (_c *MockBalancePolicy_getAverageWithSegment_Call) Return(_a0 int) *MockBalancePolicy_getAverageWithSegment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBalancePolicy_getAverageWithSegment_Call) RunAndReturn(run func(int64, []int64) int) *MockBalancePolicy_getAverageWithSegment_Call {
	_c.Call.Return(run)
	return _c
}

// getChannelsToMove provides a mock function with given fields: collectionID, nodeID, averageCount
func (_m *MockBalancePolicy) getChannelsToMove(collectionID int64, nodeID int64, averageCount int) []*meta.DmChannel {
	ret := _m.Called(collectionID, nodeID, averageCount)

	var r0 []*meta.DmChannel
	if rf, ok := ret.Get(0).(func(int64, int64, int) []*meta.DmChannel); ok {
		r0 = rf(collectionID, nodeID, averageCount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*meta.DmChannel)
		}
	}

	return r0
}

// MockBalancePolicy_getChannelsToMove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getChannelsToMove'
type MockBalancePolicy_getChannelsToMove_Call struct {
	*mock.Call
}

// getChannelsToMove is a helper method to define mock.On call
//   - collectionID int64
//   - nodeID int64
//   - averageCount int
func (_e *MockBalancePolicy_Expecter) getChannelsToMove(collectionID interface{}, nodeID interface{}, averageCount interface{}) *MockBalancePolicy_getChannelsToMove_Call {
	return &MockBalancePolicy_getChannelsToMove_Call{Call: _e.mock.On("getChannelsToMove", collectionID, nodeID, averageCount)}
}

func (_c *MockBalancePolicy_getChannelsToMove_Call) Run(run func(collectionID int64, nodeID int64, averageCount int)) *MockBalancePolicy_getChannelsToMove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64), args[2].(int))
	})
	return _c
}

func (_c *MockBalancePolicy_getChannelsToMove_Call) Return(_a0 []*meta.DmChannel) *MockBalancePolicy_getChannelsToMove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBalancePolicy_getChannelsToMove_Call) RunAndReturn(run func(int64, int64, int) []*meta.DmChannel) *MockBalancePolicy_getChannelsToMove_Call {
	_c.Call.Return(run)
	return _c
}

// getPriorityChange provides a mock function with given fields: s
func (_m *MockBalancePolicy) getPriorityChange(s *meta.Segment) int {
	ret := _m.Called(s)

	var r0 int
	if rf, ok := ret.Get(0).(func(*meta.Segment) int); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockBalancePolicy_getPriorityChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getPriorityChange'
type MockBalancePolicy_getPriorityChange_Call struct {
	*mock.Call
}

// getPriorityChange is a helper method to define mock.On call
//   - s *meta.Segment
func (_e *MockBalancePolicy_Expecter) getPriorityChange(s interface{}) *MockBalancePolicy_getPriorityChange_Call {
	return &MockBalancePolicy_getPriorityChange_Call{Call: _e.mock.On("getPriorityChange", s)}
}

func (_c *MockBalancePolicy_getPriorityChange_Call) Run(run func(s *meta.Segment)) *MockBalancePolicy_getPriorityChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*meta.Segment))
	})
	return _c
}

func (_c *MockBalancePolicy_getPriorityChange_Call) Return(_a0 int) *MockBalancePolicy_getPriorityChange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBalancePolicy_getPriorityChange_Call) RunAndReturn(run func(*meta.Segment) int) *MockBalancePolicy_getPriorityChange_Call {
	_c.Call.Return(run)
	return _c
}

// getPriorityWithSegment provides a mock function with given fields: collectionID, nodeID
func (_m *MockBalancePolicy) getPriorityWithSegment(collectionID int64, nodeID int64) int {
	ret := _m.Called(collectionID, nodeID)

	var r0 int
	if rf, ok := ret.Get(0).(func(int64, int64) int); ok {
		r0 = rf(collectionID, nodeID)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockBalancePolicy_getPriorityWithSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getPriorityWithSegment'
type MockBalancePolicy_getPriorityWithSegment_Call struct {
	*mock.Call
}

// getPriorityWithSegment is a helper method to define mock.On call
//   - collectionID int64
//   - nodeID int64
func (_e *MockBalancePolicy_Expecter) getPriorityWithSegment(collectionID interface{}, nodeID interface{}) *MockBalancePolicy_getPriorityWithSegment_Call {
	return &MockBalancePolicy_getPriorityWithSegment_Call{Call: _e.mock.On("getPriorityWithSegment", collectionID, nodeID)}
}

func (_c *MockBalancePolicy_getPriorityWithSegment_Call) Run(run func(collectionID int64, nodeID int64)) *MockBalancePolicy_getPriorityWithSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockBalancePolicy_getPriorityWithSegment_Call) Return(_a0 int) *MockBalancePolicy_getPriorityWithSegment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBalancePolicy_getPriorityWithSegment_Call) RunAndReturn(run func(int64, int64) int) *MockBalancePolicy_getPriorityWithSegment_Call {
	_c.Call.Return(run)
	return _c
}

// getSegmentsToMove provides a mock function with given fields: collectionID, nodeID, averageCount
func (_m *MockBalancePolicy) getSegmentsToMove(collectionID int64, nodeID int64, averageCount int) []*meta.Segment {
	ret := _m.Called(collectionID, nodeID, averageCount)

	var r0 []*meta.Segment
	if rf, ok := ret.Get(0).(func(int64, int64, int) []*meta.Segment); ok {
		r0 = rf(collectionID, nodeID, averageCount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*meta.Segment)
		}
	}

	return r0
}

// MockBalancePolicy_getSegmentsToMove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getSegmentsToMove'
type MockBalancePolicy_getSegmentsToMove_Call struct {
	*mock.Call
}

// getSegmentsToMove is a helper method to define mock.On call
//   - collectionID int64
//   - nodeID int64
//   - averageCount int
func (_e *MockBalancePolicy_Expecter) getSegmentsToMove(collectionID interface{}, nodeID interface{}, averageCount interface{}) *MockBalancePolicy_getSegmentsToMove_Call {
	return &MockBalancePolicy_getSegmentsToMove_Call{Call: _e.mock.On("getSegmentsToMove", collectionID, nodeID, averageCount)}
}

func (_c *MockBalancePolicy_getSegmentsToMove_Call) Run(run func(collectionID int64, nodeID int64, averageCount int)) *MockBalancePolicy_getSegmentsToMove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64), args[2].(int))
	})
	return _c
}

func (_c *MockBalancePolicy_getSegmentsToMove_Call) Return(_a0 []*meta.Segment) *MockBalancePolicy_getSegmentsToMove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBalancePolicy_getSegmentsToMove_Call) RunAndReturn(run func(int64, int64, int) []*meta.Segment) *MockBalancePolicy_getSegmentsToMove_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBalancePolicy creates a new instance of MockBalancePolicy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBalancePolicy(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBalancePolicy {
	mock := &MockBalancePolicy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
