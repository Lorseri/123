// Code generated by mockery v2.32.4. DO NOT EDIT.

package segments

import mock "github.com/stretchr/testify/mock"

// MockCollectionManager is an autogenerated mock type for the CollectionManager type
type MockCollectionManager struct {
	mock.Mock
}

type MockCollectionManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCollectionManager) EXPECT() *MockCollectionManager_Expecter {
	return &MockCollectionManager_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: collectionID
func (_m *MockCollectionManager) Get(collectionID int64) *Collection {
	ret := _m.Called(collectionID)

	var r0 *Collection
	if rf, ok := ret.Get(0).(func(int64) *Collection); ok {
		r0 = rf(collectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Collection)
		}
	}

	return r0
}

// MockCollectionManager_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCollectionManager_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - collectionID int64
func (_e *MockCollectionManager_Expecter) Get(collectionID interface{}) *MockCollectionManager_Get_Call {
	return &MockCollectionManager_Get_Call{Call: _e.mock.On("Get", collectionID)}
}

func (_c *MockCollectionManager_Get_Call) Run(run func(collectionID int64)) *MockCollectionManager_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockCollectionManager_Get_Call) Return(_a0 *Collection) *MockCollectionManager_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollectionManager_Get_Call) RunAndReturn(run func(int64) *Collection) *MockCollectionManager_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: collection
func (_m *MockCollectionManager) Put(collection *Collection) {
	_m.Called(collection)
}

// MockCollectionManager_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockCollectionManager_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - collection *Collection
func (_e *MockCollectionManager_Expecter) Put(collection interface{}) *MockCollectionManager_Put_Call {
	return &MockCollectionManager_Put_Call{Call: _e.mock.On("Put", collection)}
}

func (_c *MockCollectionManager_Put_Call) Run(run func(collection *Collection)) *MockCollectionManager_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Collection))
	})
	return _c
}

func (_c *MockCollectionManager_Put_Call) Return() *MockCollectionManager_Put_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCollectionManager_Put_Call) RunAndReturn(run func(*Collection)) *MockCollectionManager_Put_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: collectionID
func (_m *MockCollectionManager) Remove(collectionID int64) {
	_m.Called(collectionID)
}

// MockCollectionManager_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockCollectionManager_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - collectionID int64
func (_e *MockCollectionManager_Expecter) Remove(collectionID interface{}) *MockCollectionManager_Remove_Call {
	return &MockCollectionManager_Remove_Call{Call: _e.mock.On("Remove", collectionID)}
}

func (_c *MockCollectionManager_Remove_Call) Run(run func(collectionID int64)) *MockCollectionManager_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockCollectionManager_Remove_Call) Return() *MockCollectionManager_Remove_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCollectionManager_Remove_Call) RunAndReturn(run func(int64)) *MockCollectionManager_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCollectionManager creates a new instance of MockCollectionManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCollectionManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCollectionManager {
	mock := &MockCollectionManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
