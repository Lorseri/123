// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	server "github.com/milvus-io/milvus/internal/mq/mqimpl/rocksmq/server"
	mock "github.com/stretchr/testify/mock"
)

// RocksMQ is an autogenerated mock type for the RocksMQ type
type RocksMQ struct {
	mock.Mock
}

type RocksMQ_Expecter struct {
	mock *mock.Mock
}

func (_m *RocksMQ) EXPECT() *RocksMQ_Expecter {
	return &RocksMQ_Expecter{mock: &_m.Mock}
}

// CheckTopicValid provides a mock function with given fields: topicName
func (_m *RocksMQ) CheckTopicValid(topicName string) error {
	ret := _m.Called(topicName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(topicName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RocksMQ_CheckTopicValid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckTopicValid'
type RocksMQ_CheckTopicValid_Call struct {
	*mock.Call
}

// CheckTopicValid is a helper method to define mock.On call
//   - topicName string
func (_e *RocksMQ_Expecter) CheckTopicValid(topicName interface{}) *RocksMQ_CheckTopicValid_Call {
	return &RocksMQ_CheckTopicValid_Call{Call: _e.mock.On("CheckTopicValid", topicName)}
}

func (_c *RocksMQ_CheckTopicValid_Call) Run(run func(topicName string)) *RocksMQ_CheckTopicValid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RocksMQ_CheckTopicValid_Call) Return(_a0 error) *RocksMQ_CheckTopicValid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RocksMQ_CheckTopicValid_Call) RunAndReturn(run func(string) error) *RocksMQ_CheckTopicValid_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *RocksMQ) Close() {
	_m.Called()
}

// RocksMQ_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type RocksMQ_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *RocksMQ_Expecter) Close() *RocksMQ_Close_Call {
	return &RocksMQ_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *RocksMQ_Close_Call) Run(run func()) *RocksMQ_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RocksMQ_Close_Call) Return() *RocksMQ_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *RocksMQ_Close_Call) RunAndReturn(run func()) *RocksMQ_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Consume provides a mock function with given fields: topicName, groupName, n
func (_m *RocksMQ) Consume(topicName string, groupName string, n int) ([]server.ConsumerMessage, error) {
	ret := _m.Called(topicName, groupName, n)

	var r0 []server.ConsumerMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int) ([]server.ConsumerMessage, error)); ok {
		return rf(topicName, groupName, n)
	}
	if rf, ok := ret.Get(0).(func(string, string, int) []server.ConsumerMessage); ok {
		r0 = rf(topicName, groupName, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]server.ConsumerMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(topicName, groupName, n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RocksMQ_Consume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Consume'
type RocksMQ_Consume_Call struct {
	*mock.Call
}

// Consume is a helper method to define mock.On call
//   - topicName string
//   - groupName string
//   - n int
func (_e *RocksMQ_Expecter) Consume(topicName interface{}, groupName interface{}, n interface{}) *RocksMQ_Consume_Call {
	return &RocksMQ_Consume_Call{Call: _e.mock.On("Consume", topicName, groupName, n)}
}

func (_c *RocksMQ_Consume_Call) Run(run func(topicName string, groupName string, n int)) *RocksMQ_Consume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *RocksMQ_Consume_Call) Return(_a0 []server.ConsumerMessage, _a1 error) *RocksMQ_Consume_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RocksMQ_Consume_Call) RunAndReturn(run func(string, string, int) ([]server.ConsumerMessage, error)) *RocksMQ_Consume_Call {
	_c.Call.Return(run)
	return _c
}

// CreateConsumerGroup provides a mock function with given fields: topicName, groupName
func (_m *RocksMQ) CreateConsumerGroup(topicName string, groupName string) error {
	ret := _m.Called(topicName, groupName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(topicName, groupName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RocksMQ_CreateConsumerGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConsumerGroup'
type RocksMQ_CreateConsumerGroup_Call struct {
	*mock.Call
}

// CreateConsumerGroup is a helper method to define mock.On call
//   - topicName string
//   - groupName string
func (_e *RocksMQ_Expecter) CreateConsumerGroup(topicName interface{}, groupName interface{}) *RocksMQ_CreateConsumerGroup_Call {
	return &RocksMQ_CreateConsumerGroup_Call{Call: _e.mock.On("CreateConsumerGroup", topicName, groupName)}
}

func (_c *RocksMQ_CreateConsumerGroup_Call) Run(run func(topicName string, groupName string)) *RocksMQ_CreateConsumerGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *RocksMQ_CreateConsumerGroup_Call) Return(_a0 error) *RocksMQ_CreateConsumerGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RocksMQ_CreateConsumerGroup_Call) RunAndReturn(run func(string, string) error) *RocksMQ_CreateConsumerGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTopic provides a mock function with given fields: topicName
func (_m *RocksMQ) CreateTopic(topicName string) error {
	ret := _m.Called(topicName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(topicName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RocksMQ_CreateTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTopic'
type RocksMQ_CreateTopic_Call struct {
	*mock.Call
}

// CreateTopic is a helper method to define mock.On call
//   - topicName string
func (_e *RocksMQ_Expecter) CreateTopic(topicName interface{}) *RocksMQ_CreateTopic_Call {
	return &RocksMQ_CreateTopic_Call{Call: _e.mock.On("CreateTopic", topicName)}
}

func (_c *RocksMQ_CreateTopic_Call) Run(run func(topicName string)) *RocksMQ_CreateTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RocksMQ_CreateTopic_Call) Return(_a0 error) *RocksMQ_CreateTopic_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RocksMQ_CreateTopic_Call) RunAndReturn(run func(string) error) *RocksMQ_CreateTopic_Call {
	_c.Call.Return(run)
	return _c
}

// DestroyConsumerGroup provides a mock function with given fields: topicName, groupName
func (_m *RocksMQ) DestroyConsumerGroup(topicName string, groupName string) error {
	ret := _m.Called(topicName, groupName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(topicName, groupName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RocksMQ_DestroyConsumerGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DestroyConsumerGroup'
type RocksMQ_DestroyConsumerGroup_Call struct {
	*mock.Call
}

// DestroyConsumerGroup is a helper method to define mock.On call
//   - topicName string
//   - groupName string
func (_e *RocksMQ_Expecter) DestroyConsumerGroup(topicName interface{}, groupName interface{}) *RocksMQ_DestroyConsumerGroup_Call {
	return &RocksMQ_DestroyConsumerGroup_Call{Call: _e.mock.On("DestroyConsumerGroup", topicName, groupName)}
}

func (_c *RocksMQ_DestroyConsumerGroup_Call) Run(run func(topicName string, groupName string)) *RocksMQ_DestroyConsumerGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *RocksMQ_DestroyConsumerGroup_Call) Return(_a0 error) *RocksMQ_DestroyConsumerGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RocksMQ_DestroyConsumerGroup_Call) RunAndReturn(run func(string, string) error) *RocksMQ_DestroyConsumerGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DestroyTopic provides a mock function with given fields: topicName
func (_m *RocksMQ) DestroyTopic(topicName string) error {
	ret := _m.Called(topicName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(topicName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RocksMQ_DestroyTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DestroyTopic'
type RocksMQ_DestroyTopic_Call struct {
	*mock.Call
}

// DestroyTopic is a helper method to define mock.On call
//   - topicName string
func (_e *RocksMQ_Expecter) DestroyTopic(topicName interface{}) *RocksMQ_DestroyTopic_Call {
	return &RocksMQ_DestroyTopic_Call{Call: _e.mock.On("DestroyTopic", topicName)}
}

func (_c *RocksMQ_DestroyTopic_Call) Run(run func(topicName string)) *RocksMQ_DestroyTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RocksMQ_DestroyTopic_Call) Return(_a0 error) *RocksMQ_DestroyTopic_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RocksMQ_DestroyTopic_Call) RunAndReturn(run func(string) error) *RocksMQ_DestroyTopic_Call {
	_c.Call.Return(run)
	return _c
}

// ExistConsumerGroup provides a mock function with given fields: topicName, groupName
func (_m *RocksMQ) ExistConsumerGroup(topicName string, groupName string) (bool, *server.Consumer, error) {
	ret := _m.Called(topicName, groupName)

	var r0 bool
	var r1 *server.Consumer
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, *server.Consumer, error)); ok {
		return rf(topicName, groupName)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(topicName, groupName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) *server.Consumer); ok {
		r1 = rf(topicName, groupName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*server.Consumer)
		}
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(topicName, groupName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RocksMQ_ExistConsumerGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistConsumerGroup'
type RocksMQ_ExistConsumerGroup_Call struct {
	*mock.Call
}

// ExistConsumerGroup is a helper method to define mock.On call
//   - topicName string
//   - groupName string
func (_e *RocksMQ_Expecter) ExistConsumerGroup(topicName interface{}, groupName interface{}) *RocksMQ_ExistConsumerGroup_Call {
	return &RocksMQ_ExistConsumerGroup_Call{Call: _e.mock.On("ExistConsumerGroup", topicName, groupName)}
}

func (_c *RocksMQ_ExistConsumerGroup_Call) Run(run func(topicName string, groupName string)) *RocksMQ_ExistConsumerGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *RocksMQ_ExistConsumerGroup_Call) Return(_a0 bool, _a1 *server.Consumer, _a2 error) *RocksMQ_ExistConsumerGroup_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *RocksMQ_ExistConsumerGroup_Call) RunAndReturn(run func(string, string) (bool, *server.Consumer, error)) *RocksMQ_ExistConsumerGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestMsg provides a mock function with given fields: topicName
func (_m *RocksMQ) GetLatestMsg(topicName string) (int64, error) {
	ret := _m.Called(topicName)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(topicName)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(topicName)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(topicName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RocksMQ_GetLatestMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestMsg'
type RocksMQ_GetLatestMsg_Call struct {
	*mock.Call
}

// GetLatestMsg is a helper method to define mock.On call
//   - topicName string
func (_e *RocksMQ_Expecter) GetLatestMsg(topicName interface{}) *RocksMQ_GetLatestMsg_Call {
	return &RocksMQ_GetLatestMsg_Call{Call: _e.mock.On("GetLatestMsg", topicName)}
}

func (_c *RocksMQ_GetLatestMsg_Call) Run(run func(topicName string)) *RocksMQ_GetLatestMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RocksMQ_GetLatestMsg_Call) Return(_a0 int64, _a1 error) *RocksMQ_GetLatestMsg_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RocksMQ_GetLatestMsg_Call) RunAndReturn(run func(string) (int64, error)) *RocksMQ_GetLatestMsg_Call {
	_c.Call.Return(run)
	return _c
}

// Notify provides a mock function with given fields: topicName, groupName
func (_m *RocksMQ) Notify(topicName string, groupName string) {
	_m.Called(topicName, groupName)
}

// RocksMQ_Notify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notify'
type RocksMQ_Notify_Call struct {
	*mock.Call
}

// Notify is a helper method to define mock.On call
//   - topicName string
//   - groupName string
func (_e *RocksMQ_Expecter) Notify(topicName interface{}, groupName interface{}) *RocksMQ_Notify_Call {
	return &RocksMQ_Notify_Call{Call: _e.mock.On("Notify", topicName, groupName)}
}

func (_c *RocksMQ_Notify_Call) Run(run func(topicName string, groupName string)) *RocksMQ_Notify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *RocksMQ_Notify_Call) Return() *RocksMQ_Notify_Call {
	_c.Call.Return()
	return _c
}

func (_c *RocksMQ_Notify_Call) RunAndReturn(run func(string, string)) *RocksMQ_Notify_Call {
	_c.Call.Return(run)
	return _c
}

// Produce provides a mock function with given fields: ctx, topicName, messages
func (_m *RocksMQ) Produce(ctx context.Context, topicName string, messages []server.ProducerMessage) ([]int64, error) {
	ret := _m.Called(ctx, topicName, messages)

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []server.ProducerMessage) ([]int64, error)); ok {
		return rf(ctx, topicName, messages)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []server.ProducerMessage) []int64); ok {
		r0 = rf(ctx, topicName, messages)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []server.ProducerMessage) error); ok {
		r1 = rf(ctx, topicName, messages)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RocksMQ_Produce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Produce'
type RocksMQ_Produce_Call struct {
	*mock.Call
}

// Produce is a helper method to define mock.On call
//   - ctx context.Context
//   - topicName string
//   - messages []server.ProducerMessage
func (_e *RocksMQ_Expecter) Produce(ctx interface{}, topicName interface{}, messages interface{}) *RocksMQ_Produce_Call {
	return &RocksMQ_Produce_Call{Call: _e.mock.On("Produce", ctx, topicName, messages)}
}

func (_c *RocksMQ_Produce_Call) Run(run func(ctx context.Context, topicName string, messages []server.ProducerMessage)) *RocksMQ_Produce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]server.ProducerMessage))
	})
	return _c
}

func (_c *RocksMQ_Produce_Call) Return(_a0 []int64, _a1 error) *RocksMQ_Produce_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RocksMQ_Produce_Call) RunAndReturn(run func(context.Context, string, []server.ProducerMessage) ([]int64, error)) *RocksMQ_Produce_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterConsumer provides a mock function with given fields: consumer
func (_m *RocksMQ) RegisterConsumer(consumer *server.Consumer) error {
	ret := _m.Called(consumer)

	var r0 error
	if rf, ok := ret.Get(0).(func(*server.Consumer) error); ok {
		r0 = rf(consumer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RocksMQ_RegisterConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterConsumer'
type RocksMQ_RegisterConsumer_Call struct {
	*mock.Call
}

// RegisterConsumer is a helper method to define mock.On call
//   - consumer *server.Consumer
func (_e *RocksMQ_Expecter) RegisterConsumer(consumer interface{}) *RocksMQ_RegisterConsumer_Call {
	return &RocksMQ_RegisterConsumer_Call{Call: _e.mock.On("RegisterConsumer", consumer)}
}

func (_c *RocksMQ_RegisterConsumer_Call) Run(run func(consumer *server.Consumer)) *RocksMQ_RegisterConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*server.Consumer))
	})
	return _c
}

func (_c *RocksMQ_RegisterConsumer_Call) Return(_a0 error) *RocksMQ_RegisterConsumer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RocksMQ_RegisterConsumer_Call) RunAndReturn(run func(*server.Consumer) error) *RocksMQ_RegisterConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// Seek provides a mock function with given fields: topicName, groupName, msgID
func (_m *RocksMQ) Seek(topicName string, groupName string, msgID int64) error {
	ret := _m.Called(topicName, groupName, msgID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int64) error); ok {
		r0 = rf(topicName, groupName, msgID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RocksMQ_Seek_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Seek'
type RocksMQ_Seek_Call struct {
	*mock.Call
}

// Seek is a helper method to define mock.On call
//   - topicName string
//   - groupName string
//   - msgID int64
func (_e *RocksMQ_Expecter) Seek(topicName interface{}, groupName interface{}, msgID interface{}) *RocksMQ_Seek_Call {
	return &RocksMQ_Seek_Call{Call: _e.mock.On("Seek", topicName, groupName, msgID)}
}

func (_c *RocksMQ_Seek_Call) Run(run func(topicName string, groupName string, msgID int64)) *RocksMQ_Seek_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *RocksMQ_Seek_Call) Return(_a0 error) *RocksMQ_Seek_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RocksMQ_Seek_Call) RunAndReturn(run func(string, string, int64) error) *RocksMQ_Seek_Call {
	_c.Call.Return(run)
	return _c
}

// SeekToLatest provides a mock function with given fields: topicName, groupName
func (_m *RocksMQ) SeekToLatest(topicName string, groupName string) error {
	ret := _m.Called(topicName, groupName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(topicName, groupName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RocksMQ_SeekToLatest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SeekToLatest'
type RocksMQ_SeekToLatest_Call struct {
	*mock.Call
}

// SeekToLatest is a helper method to define mock.On call
//   - topicName string
//   - groupName string
func (_e *RocksMQ_Expecter) SeekToLatest(topicName interface{}, groupName interface{}) *RocksMQ_SeekToLatest_Call {
	return &RocksMQ_SeekToLatest_Call{Call: _e.mock.On("SeekToLatest", topicName, groupName)}
}

func (_c *RocksMQ_SeekToLatest_Call) Run(run func(topicName string, groupName string)) *RocksMQ_SeekToLatest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *RocksMQ_SeekToLatest_Call) Return(_a0 error) *RocksMQ_SeekToLatest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RocksMQ_SeekToLatest_Call) RunAndReturn(run func(string, string) error) *RocksMQ_SeekToLatest_Call {
	_c.Call.Return(run)
	return _c
}

// NewRocksMQ creates a new instance of RocksMQ. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRocksMQ(t interface {
	mock.TestingT
	Cleanup(func())
}) *RocksMQ {
	mock := &RocksMQ{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
