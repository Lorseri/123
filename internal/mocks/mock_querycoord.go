// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	commonpb "github.com/milvus-io/milvus-proto/go-api/commonpb"
	clientv3 "go.etcd.io/etcd/client/v3"

	internalpb "github.com/milvus-io/milvus/internal/proto/internalpb"

	milvuspb "github.com/milvus-io/milvus-proto/go-api/milvuspb"

	mock "github.com/stretchr/testify/mock"

	querypb "github.com/milvus-io/milvus/internal/proto/querypb"

	types "github.com/milvus-io/milvus/internal/types"
)

// QueryCoord is an autogenerated mock type for the QueryCoordComponent type
type QueryCoord struct {
	mock.Mock
}

type QueryCoord_Expecter struct {
	mock *mock.Mock
}

func (_m *QueryCoord) EXPECT() *QueryCoord_Expecter {
	return &QueryCoord_Expecter{mock: &_m.Mock}
}

// CheckHealth provides a mock function with given fields: ctx, req
func (_m *QueryCoord) CheckHealth(ctx context.Context, req *milvuspb.CheckHealthRequest) (*milvuspb.CheckHealthResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *milvuspb.CheckHealthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *milvuspb.CheckHealthRequest) *milvuspb.CheckHealthResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*milvuspb.CheckHealthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *milvuspb.CheckHealthRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryCoord_CheckHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckHealth'
type QueryCoord_CheckHealth_Call struct {
	*mock.Call
}

// CheckHealth is a helper method to define mock.On call
//   - ctx context.Context
//   - req *milvuspb.CheckHealthRequest
func (_e *QueryCoord_Expecter) CheckHealth(ctx interface{}, req interface{}) *QueryCoord_CheckHealth_Call {
	return &QueryCoord_CheckHealth_Call{Call: _e.mock.On("CheckHealth", ctx, req)}
}

func (_c *QueryCoord_CheckHealth_Call) Run(run func(ctx context.Context, req *milvuspb.CheckHealthRequest)) *QueryCoord_CheckHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*milvuspb.CheckHealthRequest))
	})
	return _c
}

func (_c *QueryCoord_CheckHealth_Call) Return(_a0 *milvuspb.CheckHealthResponse, _a1 error) *QueryCoord_CheckHealth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateResourceGroup provides a mock function with given fields: ctx, req
func (_m *QueryCoord) CreateResourceGroup(ctx context.Context, req *milvuspb.CreateResourceGroupRequest) (*commonpb.Status, error) {
	ret := _m.Called(ctx, req)

	var r0 *commonpb.Status
	if rf, ok := ret.Get(0).(func(context.Context, *milvuspb.CreateResourceGroupRequest) *commonpb.Status); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonpb.Status)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *milvuspb.CreateResourceGroupRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryCoord_CreateResourceGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateResourceGroup'
type QueryCoord_CreateResourceGroup_Call struct {
	*mock.Call
}

// CreateResourceGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - req *milvuspb.CreateResourceGroupRequest
func (_e *QueryCoord_Expecter) CreateResourceGroup(ctx interface{}, req interface{}) *QueryCoord_CreateResourceGroup_Call {
	return &QueryCoord_CreateResourceGroup_Call{Call: _e.mock.On("CreateResourceGroup", ctx, req)}
}

func (_c *QueryCoord_CreateResourceGroup_Call) Run(run func(ctx context.Context, req *milvuspb.CreateResourceGroupRequest)) *QueryCoord_CreateResourceGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*milvuspb.CreateResourceGroupRequest))
	})
	return _c
}

func (_c *QueryCoord_CreateResourceGroup_Call) Return(_a0 *commonpb.Status, _a1 error) *QueryCoord_CreateResourceGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DescribeResourceGroup provides a mock function with given fields: ctx, req
func (_m *QueryCoord) DescribeResourceGroup(ctx context.Context, req *querypb.DescribeResourceGroupRequest) (*querypb.DescribeResourceGroupResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *querypb.DescribeResourceGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, *querypb.DescribeResourceGroupRequest) *querypb.DescribeResourceGroupResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*querypb.DescribeResourceGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *querypb.DescribeResourceGroupRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryCoord_DescribeResourceGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeResourceGroup'
type QueryCoord_DescribeResourceGroup_Call struct {
	*mock.Call
}

// DescribeResourceGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - req *querypb.DescribeResourceGroupRequest
func (_e *QueryCoord_Expecter) DescribeResourceGroup(ctx interface{}, req interface{}) *QueryCoord_DescribeResourceGroup_Call {
	return &QueryCoord_DescribeResourceGroup_Call{Call: _e.mock.On("DescribeResourceGroup", ctx, req)}
}

func (_c *QueryCoord_DescribeResourceGroup_Call) Run(run func(ctx context.Context, req *querypb.DescribeResourceGroupRequest)) *QueryCoord_DescribeResourceGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*querypb.DescribeResourceGroupRequest))
	})
	return _c
}

func (_c *QueryCoord_DescribeResourceGroup_Call) Return(_a0 *querypb.DescribeResourceGroupResponse, _a1 error) *QueryCoord_DescribeResourceGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DropResourceGroup provides a mock function with given fields: ctx, req
func (_m *QueryCoord) DropResourceGroup(ctx context.Context, req *milvuspb.DropResourceGroupRequest) (*commonpb.Status, error) {
	ret := _m.Called(ctx, req)

	var r0 *commonpb.Status
	if rf, ok := ret.Get(0).(func(context.Context, *milvuspb.DropResourceGroupRequest) *commonpb.Status); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonpb.Status)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *milvuspb.DropResourceGroupRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryCoord_DropResourceGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropResourceGroup'
type QueryCoord_DropResourceGroup_Call struct {
	*mock.Call
}

// DropResourceGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - req *milvuspb.DropResourceGroupRequest
func (_e *QueryCoord_Expecter) DropResourceGroup(ctx interface{}, req interface{}) *QueryCoord_DropResourceGroup_Call {
	return &QueryCoord_DropResourceGroup_Call{Call: _e.mock.On("DropResourceGroup", ctx, req)}
}

func (_c *QueryCoord_DropResourceGroup_Call) Run(run func(ctx context.Context, req *milvuspb.DropResourceGroupRequest)) *QueryCoord_DropResourceGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*milvuspb.DropResourceGroupRequest))
	})
	return _c
}

func (_c *QueryCoord_DropResourceGroup_Call) Return(_a0 *commonpb.Status, _a1 error) *QueryCoord_DropResourceGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetComponentStates provides a mock function with given fields: ctx
func (_m *QueryCoord) GetComponentStates(ctx context.Context) (*milvuspb.ComponentStates, error) {
	ret := _m.Called(ctx)

	var r0 *milvuspb.ComponentStates
	if rf, ok := ret.Get(0).(func(context.Context) *milvuspb.ComponentStates); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*milvuspb.ComponentStates)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryCoord_GetComponentStates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentStates'
type QueryCoord_GetComponentStates_Call struct {
	*mock.Call
}

// GetComponentStates is a helper method to define mock.On call
//   - ctx context.Context
func (_e *QueryCoord_Expecter) GetComponentStates(ctx interface{}) *QueryCoord_GetComponentStates_Call {
	return &QueryCoord_GetComponentStates_Call{Call: _e.mock.On("GetComponentStates", ctx)}
}

func (_c *QueryCoord_GetComponentStates_Call) Run(run func(ctx context.Context)) *QueryCoord_GetComponentStates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *QueryCoord_GetComponentStates_Call) Return(_a0 *milvuspb.ComponentStates, _a1 error) *QueryCoord_GetComponentStates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetMetrics provides a mock function with given fields: ctx, req
func (_m *QueryCoord) GetMetrics(ctx context.Context, req *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *milvuspb.GetMetricsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *milvuspb.GetMetricsRequest) *milvuspb.GetMetricsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*milvuspb.GetMetricsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *milvuspb.GetMetricsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryCoord_GetMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetrics'
type QueryCoord_GetMetrics_Call struct {
	*mock.Call
}

// GetMetrics is a helper method to define mock.On call
//   - ctx context.Context
//   - req *milvuspb.GetMetricsRequest
func (_e *QueryCoord_Expecter) GetMetrics(ctx interface{}, req interface{}) *QueryCoord_GetMetrics_Call {
	return &QueryCoord_GetMetrics_Call{Call: _e.mock.On("GetMetrics", ctx, req)}
}

func (_c *QueryCoord_GetMetrics_Call) Run(run func(ctx context.Context, req *milvuspb.GetMetricsRequest)) *QueryCoord_GetMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*milvuspb.GetMetricsRequest))
	})
	return _c
}

func (_c *QueryCoord_GetMetrics_Call) Return(_a0 *milvuspb.GetMetricsResponse, _a1 error) *QueryCoord_GetMetrics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetPartitionStates provides a mock function with given fields: ctx, req
func (_m *QueryCoord) GetPartitionStates(ctx context.Context, req *querypb.GetPartitionStatesRequest) (*querypb.GetPartitionStatesResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *querypb.GetPartitionStatesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *querypb.GetPartitionStatesRequest) *querypb.GetPartitionStatesResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*querypb.GetPartitionStatesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *querypb.GetPartitionStatesRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryCoord_GetPartitionStates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPartitionStates'
type QueryCoord_GetPartitionStates_Call struct {
	*mock.Call
}

// GetPartitionStates is a helper method to define mock.On call
//   - ctx context.Context
//   - req *querypb.GetPartitionStatesRequest
func (_e *QueryCoord_Expecter) GetPartitionStates(ctx interface{}, req interface{}) *QueryCoord_GetPartitionStates_Call {
	return &QueryCoord_GetPartitionStates_Call{Call: _e.mock.On("GetPartitionStates", ctx, req)}
}

func (_c *QueryCoord_GetPartitionStates_Call) Run(run func(ctx context.Context, req *querypb.GetPartitionStatesRequest)) *QueryCoord_GetPartitionStates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*querypb.GetPartitionStatesRequest))
	})
	return _c
}

func (_c *QueryCoord_GetPartitionStates_Call) Return(_a0 *querypb.GetPartitionStatesResponse, _a1 error) *QueryCoord_GetPartitionStates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetReplicas provides a mock function with given fields: ctx, req
func (_m *QueryCoord) GetReplicas(ctx context.Context, req *milvuspb.GetReplicasRequest) (*milvuspb.GetReplicasResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *milvuspb.GetReplicasResponse
	if rf, ok := ret.Get(0).(func(context.Context, *milvuspb.GetReplicasRequest) *milvuspb.GetReplicasResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*milvuspb.GetReplicasResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *milvuspb.GetReplicasRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryCoord_GetReplicas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReplicas'
type QueryCoord_GetReplicas_Call struct {
	*mock.Call
}

// GetReplicas is a helper method to define mock.On call
//   - ctx context.Context
//   - req *milvuspb.GetReplicasRequest
func (_e *QueryCoord_Expecter) GetReplicas(ctx interface{}, req interface{}) *QueryCoord_GetReplicas_Call {
	return &QueryCoord_GetReplicas_Call{Call: _e.mock.On("GetReplicas", ctx, req)}
}

func (_c *QueryCoord_GetReplicas_Call) Run(run func(ctx context.Context, req *milvuspb.GetReplicasRequest)) *QueryCoord_GetReplicas_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*milvuspb.GetReplicasRequest))
	})
	return _c
}

func (_c *QueryCoord_GetReplicas_Call) Return(_a0 *milvuspb.GetReplicasResponse, _a1 error) *QueryCoord_GetReplicas_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetSegmentInfo provides a mock function with given fields: ctx, req
func (_m *QueryCoord) GetSegmentInfo(ctx context.Context, req *querypb.GetSegmentInfoRequest) (*querypb.GetSegmentInfoResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *querypb.GetSegmentInfoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *querypb.GetSegmentInfoRequest) *querypb.GetSegmentInfoResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*querypb.GetSegmentInfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *querypb.GetSegmentInfoRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryCoord_GetSegmentInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSegmentInfo'
type QueryCoord_GetSegmentInfo_Call struct {
	*mock.Call
}

// GetSegmentInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - req *querypb.GetSegmentInfoRequest
func (_e *QueryCoord_Expecter) GetSegmentInfo(ctx interface{}, req interface{}) *QueryCoord_GetSegmentInfo_Call {
	return &QueryCoord_GetSegmentInfo_Call{Call: _e.mock.On("GetSegmentInfo", ctx, req)}
}

func (_c *QueryCoord_GetSegmentInfo_Call) Run(run func(ctx context.Context, req *querypb.GetSegmentInfoRequest)) *QueryCoord_GetSegmentInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*querypb.GetSegmentInfoRequest))
	})
	return _c
}

func (_c *QueryCoord_GetSegmentInfo_Call) Return(_a0 *querypb.GetSegmentInfoResponse, _a1 error) *QueryCoord_GetSegmentInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetShardLeaders provides a mock function with given fields: ctx, req
func (_m *QueryCoord) GetShardLeaders(ctx context.Context, req *querypb.GetShardLeadersRequest) (*querypb.GetShardLeadersResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *querypb.GetShardLeadersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *querypb.GetShardLeadersRequest) *querypb.GetShardLeadersResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*querypb.GetShardLeadersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *querypb.GetShardLeadersRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryCoord_GetShardLeaders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShardLeaders'
type QueryCoord_GetShardLeaders_Call struct {
	*mock.Call
}

// GetShardLeaders is a helper method to define mock.On call
//   - ctx context.Context
//   - req *querypb.GetShardLeadersRequest
func (_e *QueryCoord_Expecter) GetShardLeaders(ctx interface{}, req interface{}) *QueryCoord_GetShardLeaders_Call {
	return &QueryCoord_GetShardLeaders_Call{Call: _e.mock.On("GetShardLeaders", ctx, req)}
}

func (_c *QueryCoord_GetShardLeaders_Call) Run(run func(ctx context.Context, req *querypb.GetShardLeadersRequest)) *QueryCoord_GetShardLeaders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*querypb.GetShardLeadersRequest))
	})
	return _c
}

func (_c *QueryCoord_GetShardLeaders_Call) Return(_a0 *querypb.GetShardLeadersResponse, _a1 error) *QueryCoord_GetShardLeaders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetStatisticsChannel provides a mock function with given fields: ctx
func (_m *QueryCoord) GetStatisticsChannel(ctx context.Context) (*milvuspb.StringResponse, error) {
	ret := _m.Called(ctx)

	var r0 *milvuspb.StringResponse
	if rf, ok := ret.Get(0).(func(context.Context) *milvuspb.StringResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*milvuspb.StringResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryCoord_GetStatisticsChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatisticsChannel'
type QueryCoord_GetStatisticsChannel_Call struct {
	*mock.Call
}

// GetStatisticsChannel is a helper method to define mock.On call
//   - ctx context.Context
func (_e *QueryCoord_Expecter) GetStatisticsChannel(ctx interface{}) *QueryCoord_GetStatisticsChannel_Call {
	return &QueryCoord_GetStatisticsChannel_Call{Call: _e.mock.On("GetStatisticsChannel", ctx)}
}

func (_c *QueryCoord_GetStatisticsChannel_Call) Run(run func(ctx context.Context)) *QueryCoord_GetStatisticsChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *QueryCoord_GetStatisticsChannel_Call) Return(_a0 *milvuspb.StringResponse, _a1 error) *QueryCoord_GetStatisticsChannel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTimeTickChannel provides a mock function with given fields: ctx
func (_m *QueryCoord) GetTimeTickChannel(ctx context.Context) (*milvuspb.StringResponse, error) {
	ret := _m.Called(ctx)

	var r0 *milvuspb.StringResponse
	if rf, ok := ret.Get(0).(func(context.Context) *milvuspb.StringResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*milvuspb.StringResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryCoord_GetTimeTickChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTimeTickChannel'
type QueryCoord_GetTimeTickChannel_Call struct {
	*mock.Call
}

// GetTimeTickChannel is a helper method to define mock.On call
//   - ctx context.Context
func (_e *QueryCoord_Expecter) GetTimeTickChannel(ctx interface{}) *QueryCoord_GetTimeTickChannel_Call {
	return &QueryCoord_GetTimeTickChannel_Call{Call: _e.mock.On("GetTimeTickChannel", ctx)}
}

func (_c *QueryCoord_GetTimeTickChannel_Call) Run(run func(ctx context.Context)) *QueryCoord_GetTimeTickChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *QueryCoord_GetTimeTickChannel_Call) Return(_a0 *milvuspb.StringResponse, _a1 error) *QueryCoord_GetTimeTickChannel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Init provides a mock function with given fields:
func (_m *QueryCoord) Init() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueryCoord_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type QueryCoord_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *QueryCoord_Expecter) Init() *QueryCoord_Init_Call {
	return &QueryCoord_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *QueryCoord_Init_Call) Run(run func()) *QueryCoord_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *QueryCoord_Init_Call) Return(_a0 error) *QueryCoord_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

// ListResourceGroups provides a mock function with given fields: ctx, req
func (_m *QueryCoord) ListResourceGroups(ctx context.Context, req *milvuspb.ListResourceGroupsRequest) (*milvuspb.ListResourceGroupsResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *milvuspb.ListResourceGroupsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *milvuspb.ListResourceGroupsRequest) *milvuspb.ListResourceGroupsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*milvuspb.ListResourceGroupsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *milvuspb.ListResourceGroupsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryCoord_ListResourceGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListResourceGroups'
type QueryCoord_ListResourceGroups_Call struct {
	*mock.Call
}

// ListResourceGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - req *milvuspb.ListResourceGroupsRequest
func (_e *QueryCoord_Expecter) ListResourceGroups(ctx interface{}, req interface{}) *QueryCoord_ListResourceGroups_Call {
	return &QueryCoord_ListResourceGroups_Call{Call: _e.mock.On("ListResourceGroups", ctx, req)}
}

func (_c *QueryCoord_ListResourceGroups_Call) Run(run func(ctx context.Context, req *milvuspb.ListResourceGroupsRequest)) *QueryCoord_ListResourceGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*milvuspb.ListResourceGroupsRequest))
	})
	return _c
}

func (_c *QueryCoord_ListResourceGroups_Call) Return(_a0 *milvuspb.ListResourceGroupsResponse, _a1 error) *QueryCoord_ListResourceGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// LoadBalance provides a mock function with given fields: ctx, req
func (_m *QueryCoord) LoadBalance(ctx context.Context, req *querypb.LoadBalanceRequest) (*commonpb.Status, error) {
	ret := _m.Called(ctx, req)

	var r0 *commonpb.Status
	if rf, ok := ret.Get(0).(func(context.Context, *querypb.LoadBalanceRequest) *commonpb.Status); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonpb.Status)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *querypb.LoadBalanceRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryCoord_LoadBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadBalance'
type QueryCoord_LoadBalance_Call struct {
	*mock.Call
}

// LoadBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - req *querypb.LoadBalanceRequest
func (_e *QueryCoord_Expecter) LoadBalance(ctx interface{}, req interface{}) *QueryCoord_LoadBalance_Call {
	return &QueryCoord_LoadBalance_Call{Call: _e.mock.On("LoadBalance", ctx, req)}
}

func (_c *QueryCoord_LoadBalance_Call) Run(run func(ctx context.Context, req *querypb.LoadBalanceRequest)) *QueryCoord_LoadBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*querypb.LoadBalanceRequest))
	})
	return _c
}

func (_c *QueryCoord_LoadBalance_Call) Return(_a0 *commonpb.Status, _a1 error) *QueryCoord_LoadBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// LoadCollection provides a mock function with given fields: ctx, req
func (_m *QueryCoord) LoadCollection(ctx context.Context, req *querypb.LoadCollectionRequest) (*commonpb.Status, error) {
	ret := _m.Called(ctx, req)

	var r0 *commonpb.Status
	if rf, ok := ret.Get(0).(func(context.Context, *querypb.LoadCollectionRequest) *commonpb.Status); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonpb.Status)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *querypb.LoadCollectionRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryCoord_LoadCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadCollection'
type QueryCoord_LoadCollection_Call struct {
	*mock.Call
}

// LoadCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - req *querypb.LoadCollectionRequest
func (_e *QueryCoord_Expecter) LoadCollection(ctx interface{}, req interface{}) *QueryCoord_LoadCollection_Call {
	return &QueryCoord_LoadCollection_Call{Call: _e.mock.On("LoadCollection", ctx, req)}
}

func (_c *QueryCoord_LoadCollection_Call) Run(run func(ctx context.Context, req *querypb.LoadCollectionRequest)) *QueryCoord_LoadCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*querypb.LoadCollectionRequest))
	})
	return _c
}

func (_c *QueryCoord_LoadCollection_Call) Return(_a0 *commonpb.Status, _a1 error) *QueryCoord_LoadCollection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// LoadPartitions provides a mock function with given fields: ctx, req
func (_m *QueryCoord) LoadPartitions(ctx context.Context, req *querypb.LoadPartitionsRequest) (*commonpb.Status, error) {
	ret := _m.Called(ctx, req)

	var r0 *commonpb.Status
	if rf, ok := ret.Get(0).(func(context.Context, *querypb.LoadPartitionsRequest) *commonpb.Status); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonpb.Status)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *querypb.LoadPartitionsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryCoord_LoadPartitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadPartitions'
type QueryCoord_LoadPartitions_Call struct {
	*mock.Call
}

// LoadPartitions is a helper method to define mock.On call
//   - ctx context.Context
//   - req *querypb.LoadPartitionsRequest
func (_e *QueryCoord_Expecter) LoadPartitions(ctx interface{}, req interface{}) *QueryCoord_LoadPartitions_Call {
	return &QueryCoord_LoadPartitions_Call{Call: _e.mock.On("LoadPartitions", ctx, req)}
}

func (_c *QueryCoord_LoadPartitions_Call) Run(run func(ctx context.Context, req *querypb.LoadPartitionsRequest)) *QueryCoord_LoadPartitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*querypb.LoadPartitionsRequest))
	})
	return _c
}

func (_c *QueryCoord_LoadPartitions_Call) Return(_a0 *commonpb.Status, _a1 error) *QueryCoord_LoadPartitions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Register provides a mock function with given fields:
func (_m *QueryCoord) Register() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueryCoord_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type QueryCoord_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
func (_e *QueryCoord_Expecter) Register() *QueryCoord_Register_Call {
	return &QueryCoord_Register_Call{Call: _e.mock.On("Register")}
}

func (_c *QueryCoord_Register_Call) Run(run func()) *QueryCoord_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *QueryCoord_Register_Call) Return(_a0 error) *QueryCoord_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

// ReleaseCollection provides a mock function with given fields: ctx, req
func (_m *QueryCoord) ReleaseCollection(ctx context.Context, req *querypb.ReleaseCollectionRequest) (*commonpb.Status, error) {
	ret := _m.Called(ctx, req)

	var r0 *commonpb.Status
	if rf, ok := ret.Get(0).(func(context.Context, *querypb.ReleaseCollectionRequest) *commonpb.Status); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonpb.Status)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *querypb.ReleaseCollectionRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryCoord_ReleaseCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleaseCollection'
type QueryCoord_ReleaseCollection_Call struct {
	*mock.Call
}

// ReleaseCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - req *querypb.ReleaseCollectionRequest
func (_e *QueryCoord_Expecter) ReleaseCollection(ctx interface{}, req interface{}) *QueryCoord_ReleaseCollection_Call {
	return &QueryCoord_ReleaseCollection_Call{Call: _e.mock.On("ReleaseCollection", ctx, req)}
}

func (_c *QueryCoord_ReleaseCollection_Call) Run(run func(ctx context.Context, req *querypb.ReleaseCollectionRequest)) *QueryCoord_ReleaseCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*querypb.ReleaseCollectionRequest))
	})
	return _c
}

func (_c *QueryCoord_ReleaseCollection_Call) Return(_a0 *commonpb.Status, _a1 error) *QueryCoord_ReleaseCollection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ReleasePartitions provides a mock function with given fields: ctx, req
func (_m *QueryCoord) ReleasePartitions(ctx context.Context, req *querypb.ReleasePartitionsRequest) (*commonpb.Status, error) {
	ret := _m.Called(ctx, req)

	var r0 *commonpb.Status
	if rf, ok := ret.Get(0).(func(context.Context, *querypb.ReleasePartitionsRequest) *commonpb.Status); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonpb.Status)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *querypb.ReleasePartitionsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryCoord_ReleasePartitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleasePartitions'
type QueryCoord_ReleasePartitions_Call struct {
	*mock.Call
}

// ReleasePartitions is a helper method to define mock.On call
//   - ctx context.Context
//   - req *querypb.ReleasePartitionsRequest
func (_e *QueryCoord_Expecter) ReleasePartitions(ctx interface{}, req interface{}) *QueryCoord_ReleasePartitions_Call {
	return &QueryCoord_ReleasePartitions_Call{Call: _e.mock.On("ReleasePartitions", ctx, req)}
}

func (_c *QueryCoord_ReleasePartitions_Call) Run(run func(ctx context.Context, req *querypb.ReleasePartitionsRequest)) *QueryCoord_ReleasePartitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*querypb.ReleasePartitionsRequest))
	})
	return _c
}

func (_c *QueryCoord_ReleasePartitions_Call) Return(_a0 *commonpb.Status, _a1 error) *QueryCoord_ReleasePartitions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SetAddress provides a mock function with given fields: address
func (_m *QueryCoord) SetAddress(address string) {
	_m.Called(address)
}

// QueryCoord_SetAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAddress'
type QueryCoord_SetAddress_Call struct {
	*mock.Call
}

// SetAddress is a helper method to define mock.On call
//   - address string
func (_e *QueryCoord_Expecter) SetAddress(address interface{}) *QueryCoord_SetAddress_Call {
	return &QueryCoord_SetAddress_Call{Call: _e.mock.On("SetAddress", address)}
}

func (_c *QueryCoord_SetAddress_Call) Run(run func(address string)) *QueryCoord_SetAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *QueryCoord_SetAddress_Call) Return() *QueryCoord_SetAddress_Call {
	_c.Call.Return()
	return _c
}

// SetDataCoord provides a mock function with given fields: dataCoord
func (_m *QueryCoord) SetDataCoord(dataCoord types.DataCoord) error {
	ret := _m.Called(dataCoord)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.DataCoord) error); ok {
		r0 = rf(dataCoord)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueryCoord_SetDataCoord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDataCoord'
type QueryCoord_SetDataCoord_Call struct {
	*mock.Call
}

// SetDataCoord is a helper method to define mock.On call
//   - dataCoord types.DataCoord
func (_e *QueryCoord_Expecter) SetDataCoord(dataCoord interface{}) *QueryCoord_SetDataCoord_Call {
	return &QueryCoord_SetDataCoord_Call{Call: _e.mock.On("SetDataCoord", dataCoord)}
}

func (_c *QueryCoord_SetDataCoord_Call) Run(run func(dataCoord types.DataCoord)) *QueryCoord_SetDataCoord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.DataCoord))
	})
	return _c
}

func (_c *QueryCoord_SetDataCoord_Call) Return(_a0 error) *QueryCoord_SetDataCoord_Call {
	_c.Call.Return(_a0)
	return _c
}

// SetEtcdClient provides a mock function with given fields: etcdClient
func (_m *QueryCoord) SetEtcdClient(etcdClient *clientv3.Client) {
	_m.Called(etcdClient)
}

// QueryCoord_SetEtcdClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEtcdClient'
type QueryCoord_SetEtcdClient_Call struct {
	*mock.Call
}

// SetEtcdClient is a helper method to define mock.On call
//   - etcdClient *clientv3.Client
func (_e *QueryCoord_Expecter) SetEtcdClient(etcdClient interface{}) *QueryCoord_SetEtcdClient_Call {
	return &QueryCoord_SetEtcdClient_Call{Call: _e.mock.On("SetEtcdClient", etcdClient)}
}

func (_c *QueryCoord_SetEtcdClient_Call) Run(run func(etcdClient *clientv3.Client)) *QueryCoord_SetEtcdClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*clientv3.Client))
	})
	return _c
}

func (_c *QueryCoord_SetEtcdClient_Call) Return() *QueryCoord_SetEtcdClient_Call {
	_c.Call.Return()
	return _c
}

// SetQueryNodeCreator provides a mock function with given fields: _a0
func (_m *QueryCoord) SetQueryNodeCreator(_a0 func(context.Context, string) (types.QueryNode, error)) {
	_m.Called(_a0)
}

// QueryCoord_SetQueryNodeCreator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetQueryNodeCreator'
type QueryCoord_SetQueryNodeCreator_Call struct {
	*mock.Call
}

// SetQueryNodeCreator is a helper method to define mock.On call
//   - _a0 func(context.Context , string)(types.QueryNode , error)
func (_e *QueryCoord_Expecter) SetQueryNodeCreator(_a0 interface{}) *QueryCoord_SetQueryNodeCreator_Call {
	return &QueryCoord_SetQueryNodeCreator_Call{Call: _e.mock.On("SetQueryNodeCreator", _a0)}
}

func (_c *QueryCoord_SetQueryNodeCreator_Call) Run(run func(_a0 func(context.Context, string) (types.QueryNode, error))) *QueryCoord_SetQueryNodeCreator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, string) (types.QueryNode, error)))
	})
	return _c
}

func (_c *QueryCoord_SetQueryNodeCreator_Call) Return() *QueryCoord_SetQueryNodeCreator_Call {
	_c.Call.Return()
	return _c
}

// SetRootCoord provides a mock function with given fields: rootCoord
func (_m *QueryCoord) SetRootCoord(rootCoord types.RootCoord) error {
	ret := _m.Called(rootCoord)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.RootCoord) error); ok {
		r0 = rf(rootCoord)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueryCoord_SetRootCoord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRootCoord'
type QueryCoord_SetRootCoord_Call struct {
	*mock.Call
}

// SetRootCoord is a helper method to define mock.On call
//   - rootCoord types.RootCoord
func (_e *QueryCoord_Expecter) SetRootCoord(rootCoord interface{}) *QueryCoord_SetRootCoord_Call {
	return &QueryCoord_SetRootCoord_Call{Call: _e.mock.On("SetRootCoord", rootCoord)}
}

func (_c *QueryCoord_SetRootCoord_Call) Run(run func(rootCoord types.RootCoord)) *QueryCoord_SetRootCoord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.RootCoord))
	})
	return _c
}

func (_c *QueryCoord_SetRootCoord_Call) Return(_a0 error) *QueryCoord_SetRootCoord_Call {
	_c.Call.Return(_a0)
	return _c
}

// ShowCollections provides a mock function with given fields: ctx, req
func (_m *QueryCoord) ShowCollections(ctx context.Context, req *querypb.ShowCollectionsRequest) (*querypb.ShowCollectionsResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *querypb.ShowCollectionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *querypb.ShowCollectionsRequest) *querypb.ShowCollectionsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*querypb.ShowCollectionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *querypb.ShowCollectionsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryCoord_ShowCollections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowCollections'
type QueryCoord_ShowCollections_Call struct {
	*mock.Call
}

// ShowCollections is a helper method to define mock.On call
//   - ctx context.Context
//   - req *querypb.ShowCollectionsRequest
func (_e *QueryCoord_Expecter) ShowCollections(ctx interface{}, req interface{}) *QueryCoord_ShowCollections_Call {
	return &QueryCoord_ShowCollections_Call{Call: _e.mock.On("ShowCollections", ctx, req)}
}

func (_c *QueryCoord_ShowCollections_Call) Run(run func(ctx context.Context, req *querypb.ShowCollectionsRequest)) *QueryCoord_ShowCollections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*querypb.ShowCollectionsRequest))
	})
	return _c
}

func (_c *QueryCoord_ShowCollections_Call) Return(_a0 *querypb.ShowCollectionsResponse, _a1 error) *QueryCoord_ShowCollections_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ShowConfigurations provides a mock function with given fields: ctx, req
func (_m *QueryCoord) ShowConfigurations(ctx context.Context, req *internalpb.ShowConfigurationsRequest) (*internalpb.ShowConfigurationsResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *internalpb.ShowConfigurationsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *internalpb.ShowConfigurationsRequest) *internalpb.ShowConfigurationsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalpb.ShowConfigurationsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalpb.ShowConfigurationsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryCoord_ShowConfigurations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowConfigurations'
type QueryCoord_ShowConfigurations_Call struct {
	*mock.Call
}

// ShowConfigurations is a helper method to define mock.On call
//   - ctx context.Context
//   - req *internalpb.ShowConfigurationsRequest
func (_e *QueryCoord_Expecter) ShowConfigurations(ctx interface{}, req interface{}) *QueryCoord_ShowConfigurations_Call {
	return &QueryCoord_ShowConfigurations_Call{Call: _e.mock.On("ShowConfigurations", ctx, req)}
}

func (_c *QueryCoord_ShowConfigurations_Call) Run(run func(ctx context.Context, req *internalpb.ShowConfigurationsRequest)) *QueryCoord_ShowConfigurations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*internalpb.ShowConfigurationsRequest))
	})
	return _c
}

func (_c *QueryCoord_ShowConfigurations_Call) Return(_a0 *internalpb.ShowConfigurationsResponse, _a1 error) *QueryCoord_ShowConfigurations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ShowPartitions provides a mock function with given fields: ctx, req
func (_m *QueryCoord) ShowPartitions(ctx context.Context, req *querypb.ShowPartitionsRequest) (*querypb.ShowPartitionsResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *querypb.ShowPartitionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *querypb.ShowPartitionsRequest) *querypb.ShowPartitionsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*querypb.ShowPartitionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *querypb.ShowPartitionsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryCoord_ShowPartitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowPartitions'
type QueryCoord_ShowPartitions_Call struct {
	*mock.Call
}

// ShowPartitions is a helper method to define mock.On call
//   - ctx context.Context
//   - req *querypb.ShowPartitionsRequest
func (_e *QueryCoord_Expecter) ShowPartitions(ctx interface{}, req interface{}) *QueryCoord_ShowPartitions_Call {
	return &QueryCoord_ShowPartitions_Call{Call: _e.mock.On("ShowPartitions", ctx, req)}
}

func (_c *QueryCoord_ShowPartitions_Call) Run(run func(ctx context.Context, req *querypb.ShowPartitionsRequest)) *QueryCoord_ShowPartitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*querypb.ShowPartitionsRequest))
	})
	return _c
}

func (_c *QueryCoord_ShowPartitions_Call) Return(_a0 *querypb.ShowPartitionsResponse, _a1 error) *QueryCoord_ShowPartitions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Start provides a mock function with given fields:
func (_m *QueryCoord) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueryCoord_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type QueryCoord_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *QueryCoord_Expecter) Start() *QueryCoord_Start_Call {
	return &QueryCoord_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *QueryCoord_Start_Call) Run(run func()) *QueryCoord_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *QueryCoord_Start_Call) Return(_a0 error) *QueryCoord_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *QueryCoord) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueryCoord_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type QueryCoord_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *QueryCoord_Expecter) Stop() *QueryCoord_Stop_Call {
	return &QueryCoord_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *QueryCoord_Stop_Call) Run(run func()) *QueryCoord_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *QueryCoord_Stop_Call) Return(_a0 error) *QueryCoord_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

// SyncNewCreatedPartition provides a mock function with given fields: ctx, req
func (_m *QueryCoord) SyncNewCreatedPartition(ctx context.Context, req *querypb.SyncNewCreatedPartitionRequest) (*commonpb.Status, error) {
	ret := _m.Called(ctx, req)

	var r0 *commonpb.Status
	if rf, ok := ret.Get(0).(func(context.Context, *querypb.SyncNewCreatedPartitionRequest) *commonpb.Status); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonpb.Status)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *querypb.SyncNewCreatedPartitionRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryCoord_SyncNewCreatedPartition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncNewCreatedPartition'
type QueryCoord_SyncNewCreatedPartition_Call struct {
	*mock.Call
}

// SyncNewCreatedPartition is a helper method to define mock.On call
//   - ctx context.Context
//   - req *querypb.SyncNewCreatedPartitionRequest
func (_e *QueryCoord_Expecter) SyncNewCreatedPartition(ctx interface{}, req interface{}) *QueryCoord_SyncNewCreatedPartition_Call {
	return &QueryCoord_SyncNewCreatedPartition_Call{Call: _e.mock.On("SyncNewCreatedPartition", ctx, req)}
}

func (_c *QueryCoord_SyncNewCreatedPartition_Call) Run(run func(ctx context.Context, req *querypb.SyncNewCreatedPartitionRequest)) *QueryCoord_SyncNewCreatedPartition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*querypb.SyncNewCreatedPartitionRequest))
	})
	return _c
}

func (_c *QueryCoord_SyncNewCreatedPartition_Call) Return(_a0 *commonpb.Status, _a1 error) *QueryCoord_SyncNewCreatedPartition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// TransferNode provides a mock function with given fields: ctx, req
func (_m *QueryCoord) TransferNode(ctx context.Context, req *milvuspb.TransferNodeRequest) (*commonpb.Status, error) {
	ret := _m.Called(ctx, req)

	var r0 *commonpb.Status
	if rf, ok := ret.Get(0).(func(context.Context, *milvuspb.TransferNodeRequest) *commonpb.Status); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonpb.Status)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *milvuspb.TransferNodeRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryCoord_TransferNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransferNode'
type QueryCoord_TransferNode_Call struct {
	*mock.Call
}

// TransferNode is a helper method to define mock.On call
//   - ctx context.Context
//   - req *milvuspb.TransferNodeRequest
func (_e *QueryCoord_Expecter) TransferNode(ctx interface{}, req interface{}) *QueryCoord_TransferNode_Call {
	return &QueryCoord_TransferNode_Call{Call: _e.mock.On("TransferNode", ctx, req)}
}

func (_c *QueryCoord_TransferNode_Call) Run(run func(ctx context.Context, req *milvuspb.TransferNodeRequest)) *QueryCoord_TransferNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*milvuspb.TransferNodeRequest))
	})
	return _c
}

func (_c *QueryCoord_TransferNode_Call) Return(_a0 *commonpb.Status, _a1 error) *QueryCoord_TransferNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// TransferReplica provides a mock function with given fields: ctx, req
func (_m *QueryCoord) TransferReplica(ctx context.Context, req *querypb.TransferReplicaRequest) (*commonpb.Status, error) {
	ret := _m.Called(ctx, req)

	var r0 *commonpb.Status
	if rf, ok := ret.Get(0).(func(context.Context, *querypb.TransferReplicaRequest) *commonpb.Status); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonpb.Status)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *querypb.TransferReplicaRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryCoord_TransferReplica_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransferReplica'
type QueryCoord_TransferReplica_Call struct {
	*mock.Call
}

// TransferReplica is a helper method to define mock.On call
//   - ctx context.Context
//   - req *querypb.TransferReplicaRequest
func (_e *QueryCoord_Expecter) TransferReplica(ctx interface{}, req interface{}) *QueryCoord_TransferReplica_Call {
	return &QueryCoord_TransferReplica_Call{Call: _e.mock.On("TransferReplica", ctx, req)}
}

func (_c *QueryCoord_TransferReplica_Call) Run(run func(ctx context.Context, req *querypb.TransferReplicaRequest)) *QueryCoord_TransferReplica_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*querypb.TransferReplicaRequest))
	})
	return _c
}

func (_c *QueryCoord_TransferReplica_Call) Return(_a0 *commonpb.Status, _a1 error) *QueryCoord_TransferReplica_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateStateCode provides a mock function with given fields: stateCode
func (_m *QueryCoord) UpdateStateCode(stateCode commonpb.StateCode) {
	_m.Called(stateCode)
}

// QueryCoord_UpdateStateCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStateCode'
type QueryCoord_UpdateStateCode_Call struct {
	*mock.Call
}

// UpdateStateCode is a helper method to define mock.On call
//   - stateCode commonpb.StateCode
func (_e *QueryCoord_Expecter) UpdateStateCode(stateCode interface{}) *QueryCoord_UpdateStateCode_Call {
	return &QueryCoord_UpdateStateCode_Call{Call: _e.mock.On("UpdateStateCode", stateCode)}
}

func (_c *QueryCoord_UpdateStateCode_Call) Run(run func(stateCode commonpb.StateCode)) *QueryCoord_UpdateStateCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(commonpb.StateCode))
	})
	return _c
}

func (_c *QueryCoord_UpdateStateCode_Call) Return() *QueryCoord_UpdateStateCode_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewQueryCoord interface {
	mock.TestingT
	Cleanup(func())
}

// NewQueryCoord creates a new instance of QueryCoord. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQueryCoord(t mockConstructorTestingTNewQueryCoord) *QueryCoord {
	mock := &QueryCoord{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
