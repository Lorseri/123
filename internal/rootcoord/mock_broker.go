// Code generated by mockery v2.21.1. DO NOT EDIT.

package rootcoord

import (
	context "context"

	commonpb "github.com/milvus-io/milvus-proto/go-api/commonpb"

	datapb "github.com/milvus-io/milvus/internal/proto/datapb"

	indexpb "github.com/milvus-io/milvus/internal/proto/indexpb"

	milvuspb "github.com/milvus-io/milvus-proto/go-api/milvuspb"

	mock "github.com/stretchr/testify/mock"

	querypb "github.com/milvus-io/milvus/internal/proto/querypb"
)

// MockBroker is an autogenerated mock type for the Broker type
type MockBroker struct {
	mock.Mock
}

type MockBroker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBroker) EXPECT() *MockBroker_Expecter {
	return &MockBroker_Expecter{mock: &_m.Mock}
}

// AddSegRefLock provides a mock function with given fields: ctx, taskID, segIDs
func (_m *MockBroker) AddSegRefLock(ctx context.Context, taskID int64, segIDs []int64) error {
	ret := _m.Called(ctx, taskID, segIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []int64) error); ok {
		r0 = rf(ctx, taskID, segIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBroker_AddSegRefLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSegRefLock'
type MockBroker_AddSegRefLock_Call struct {
	*mock.Call
}

// AddSegRefLock is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID int64
//   - segIDs []int64
func (_e *MockBroker_Expecter) AddSegRefLock(ctx interface{}, taskID interface{}, segIDs interface{}) *MockBroker_AddSegRefLock_Call {
	return &MockBroker_AddSegRefLock_Call{Call: _e.mock.On("AddSegRefLock", ctx, taskID, segIDs)}
}

func (_c *MockBroker_AddSegRefLock_Call) Run(run func(ctx context.Context, taskID int64, segIDs []int64)) *MockBroker_AddSegRefLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].([]int64))
	})
	return _c
}

func (_c *MockBroker_AddSegRefLock_Call) Return(_a0 error) *MockBroker_AddSegRefLock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBroker_AddSegRefLock_Call) RunAndReturn(run func(context.Context, int64, []int64) error) *MockBroker_AddSegRefLock_Call {
	_c.Call.Return(run)
	return _c
}

// BroadcastAlteredCollection provides a mock function with given fields: ctx, req
func (_m *MockBroker) BroadcastAlteredCollection(ctx context.Context, req *milvuspb.AlterCollectionRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *milvuspb.AlterCollectionRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBroker_BroadcastAlteredCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BroadcastAlteredCollection'
type MockBroker_BroadcastAlteredCollection_Call struct {
	*mock.Call
}

// BroadcastAlteredCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - req *milvuspb.AlterCollectionRequest
func (_e *MockBroker_Expecter) BroadcastAlteredCollection(ctx interface{}, req interface{}) *MockBroker_BroadcastAlteredCollection_Call {
	return &MockBroker_BroadcastAlteredCollection_Call{Call: _e.mock.On("BroadcastAlteredCollection", ctx, req)}
}

func (_c *MockBroker_BroadcastAlteredCollection_Call) Run(run func(ctx context.Context, req *milvuspb.AlterCollectionRequest)) *MockBroker_BroadcastAlteredCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*milvuspb.AlterCollectionRequest))
	})
	return _c
}

func (_c *MockBroker_BroadcastAlteredCollection_Call) Return(_a0 error) *MockBroker_BroadcastAlteredCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBroker_BroadcastAlteredCollection_Call) RunAndReturn(run func(context.Context, *milvuspb.AlterCollectionRequest) error) *MockBroker_BroadcastAlteredCollection_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeIndex provides a mock function with given fields: ctx, colID
func (_m *MockBroker) DescribeIndex(ctx context.Context, colID int64) (*indexpb.DescribeIndexResponse, error) {
	ret := _m.Called(ctx, colID)

	var r0 *indexpb.DescribeIndexResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*indexpb.DescribeIndexResponse, error)); ok {
		return rf(ctx, colID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *indexpb.DescribeIndexResponse); ok {
		r0 = rf(ctx, colID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*indexpb.DescribeIndexResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, colID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBroker_DescribeIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeIndex'
type MockBroker_DescribeIndex_Call struct {
	*mock.Call
}

// DescribeIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - colID int64
func (_e *MockBroker_Expecter) DescribeIndex(ctx interface{}, colID interface{}) *MockBroker_DescribeIndex_Call {
	return &MockBroker_DescribeIndex_Call{Call: _e.mock.On("DescribeIndex", ctx, colID)}
}

func (_c *MockBroker_DescribeIndex_Call) Run(run func(ctx context.Context, colID int64)) *MockBroker_DescribeIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockBroker_DescribeIndex_Call) Return(_a0 *indexpb.DescribeIndexResponse, _a1 error) *MockBroker_DescribeIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBroker_DescribeIndex_Call) RunAndReturn(run func(context.Context, int64) (*indexpb.DescribeIndexResponse, error)) *MockBroker_DescribeIndex_Call {
	_c.Call.Return(run)
	return _c
}

// DropCollectionIndex provides a mock function with given fields: ctx, collID, partIDs
func (_m *MockBroker) DropCollectionIndex(ctx context.Context, collID int64, partIDs []int64) error {
	ret := _m.Called(ctx, collID, partIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []int64) error); ok {
		r0 = rf(ctx, collID, partIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBroker_DropCollectionIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropCollectionIndex'
type MockBroker_DropCollectionIndex_Call struct {
	*mock.Call
}

// DropCollectionIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - collID int64
//   - partIDs []int64
func (_e *MockBroker_Expecter) DropCollectionIndex(ctx interface{}, collID interface{}, partIDs interface{}) *MockBroker_DropCollectionIndex_Call {
	return &MockBroker_DropCollectionIndex_Call{Call: _e.mock.On("DropCollectionIndex", ctx, collID, partIDs)}
}

func (_c *MockBroker_DropCollectionIndex_Call) Run(run func(ctx context.Context, collID int64, partIDs []int64)) *MockBroker_DropCollectionIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].([]int64))
	})
	return _c
}

func (_c *MockBroker_DropCollectionIndex_Call) Return(_a0 error) *MockBroker_DropCollectionIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBroker_DropCollectionIndex_Call) RunAndReturn(run func(context.Context, int64, []int64) error) *MockBroker_DropCollectionIndex_Call {
	_c.Call.Return(run)
	return _c
}

// Flush provides a mock function with given fields: ctx, cID, segIDs
func (_m *MockBroker) Flush(ctx context.Context, cID int64, segIDs []int64) error {
	ret := _m.Called(ctx, cID, segIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []int64) error); ok {
		r0 = rf(ctx, cID, segIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBroker_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type MockBroker_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
//   - ctx context.Context
//   - cID int64
//   - segIDs []int64
func (_e *MockBroker_Expecter) Flush(ctx interface{}, cID interface{}, segIDs interface{}) *MockBroker_Flush_Call {
	return &MockBroker_Flush_Call{Call: _e.mock.On("Flush", ctx, cID, segIDs)}
}

func (_c *MockBroker_Flush_Call) Run(run func(ctx context.Context, cID int64, segIDs []int64)) *MockBroker_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].([]int64))
	})
	return _c
}

func (_c *MockBroker_Flush_Call) Return(_a0 error) *MockBroker_Flush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBroker_Flush_Call) RunAndReturn(run func(context.Context, int64, []int64) error) *MockBroker_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// GcConfirm provides a mock function with given fields: ctx, collectionID, partitionID
func (_m *MockBroker) GcConfirm(ctx context.Context, collectionID int64, partitionID int64) bool {
	ret := _m.Called(ctx, collectionID, partitionID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) bool); ok {
		r0 = rf(ctx, collectionID, partitionID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockBroker_GcConfirm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GcConfirm'
type MockBroker_GcConfirm_Call struct {
	*mock.Call
}

// GcConfirm is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionID int64
//   - partitionID int64
func (_e *MockBroker_Expecter) GcConfirm(ctx interface{}, collectionID interface{}, partitionID interface{}) *MockBroker_GcConfirm_Call {
	return &MockBroker_GcConfirm_Call{Call: _e.mock.On("GcConfirm", ctx, collectionID, partitionID)}
}

func (_c *MockBroker_GcConfirm_Call) Run(run func(ctx context.Context, collectionID int64, partitionID int64)) *MockBroker_GcConfirm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockBroker_GcConfirm_Call) Return(_a0 bool) *MockBroker_GcConfirm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBroker_GcConfirm_Call) RunAndReturn(run func(context.Context, int64, int64) bool) *MockBroker_GcConfirm_Call {
	_c.Call.Return(run)
	return _c
}

// GetQuerySegmentInfo provides a mock function with given fields: ctx, collectionID, segIDs
func (_m *MockBroker) GetQuerySegmentInfo(ctx context.Context, collectionID int64, segIDs []int64) (*querypb.GetSegmentInfoResponse, error) {
	ret := _m.Called(ctx, collectionID, segIDs)

	var r0 *querypb.GetSegmentInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []int64) (*querypb.GetSegmentInfoResponse, error)); ok {
		return rf(ctx, collectionID, segIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, []int64) *querypb.GetSegmentInfoResponse); ok {
		r0 = rf(ctx, collectionID, segIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*querypb.GetSegmentInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, []int64) error); ok {
		r1 = rf(ctx, collectionID, segIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBroker_GetQuerySegmentInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuerySegmentInfo'
type MockBroker_GetQuerySegmentInfo_Call struct {
	*mock.Call
}

// GetQuerySegmentInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionID int64
//   - segIDs []int64
func (_e *MockBroker_Expecter) GetQuerySegmentInfo(ctx interface{}, collectionID interface{}, segIDs interface{}) *MockBroker_GetQuerySegmentInfo_Call {
	return &MockBroker_GetQuerySegmentInfo_Call{Call: _e.mock.On("GetQuerySegmentInfo", ctx, collectionID, segIDs)}
}

func (_c *MockBroker_GetQuerySegmentInfo_Call) Run(run func(ctx context.Context, collectionID int64, segIDs []int64)) *MockBroker_GetQuerySegmentInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].([]int64))
	})
	return _c
}

func (_c *MockBroker_GetQuerySegmentInfo_Call) Return(retResp *querypb.GetSegmentInfoResponse, retErr error) *MockBroker_GetQuerySegmentInfo_Call {
	_c.Call.Return(retResp, retErr)
	return _c
}

func (_c *MockBroker_GetQuerySegmentInfo_Call) RunAndReturn(run func(context.Context, int64, []int64) (*querypb.GetSegmentInfoResponse, error)) *MockBroker_GetQuerySegmentInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetSegmentIndexState provides a mock function with given fields: ctx, collID, indexName, segIDs
func (_m *MockBroker) GetSegmentIndexState(ctx context.Context, collID int64, indexName string, segIDs []int64) ([]*indexpb.SegmentIndexState, error) {
	ret := _m.Called(ctx, collID, indexName, segIDs)

	var r0 []*indexpb.SegmentIndexState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, []int64) ([]*indexpb.SegmentIndexState, error)); ok {
		return rf(ctx, collID, indexName, segIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, []int64) []*indexpb.SegmentIndexState); ok {
		r0 = rf(ctx, collID, indexName, segIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*indexpb.SegmentIndexState)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string, []int64) error); ok {
		r1 = rf(ctx, collID, indexName, segIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBroker_GetSegmentIndexState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSegmentIndexState'
type MockBroker_GetSegmentIndexState_Call struct {
	*mock.Call
}

// GetSegmentIndexState is a helper method to define mock.On call
//   - ctx context.Context
//   - collID int64
//   - indexName string
//   - segIDs []int64
func (_e *MockBroker_Expecter) GetSegmentIndexState(ctx interface{}, collID interface{}, indexName interface{}, segIDs interface{}) *MockBroker_GetSegmentIndexState_Call {
	return &MockBroker_GetSegmentIndexState_Call{Call: _e.mock.On("GetSegmentIndexState", ctx, collID, indexName, segIDs)}
}

func (_c *MockBroker_GetSegmentIndexState_Call) Run(run func(ctx context.Context, collID int64, indexName string, segIDs []int64)) *MockBroker_GetSegmentIndexState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string), args[3].([]int64))
	})
	return _c
}

func (_c *MockBroker_GetSegmentIndexState_Call) Return(_a0 []*indexpb.SegmentIndexState, _a1 error) *MockBroker_GetSegmentIndexState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBroker_GetSegmentIndexState_Call) RunAndReturn(run func(context.Context, int64, string, []int64) ([]*indexpb.SegmentIndexState, error)) *MockBroker_GetSegmentIndexState_Call {
	_c.Call.Return(run)
	return _c
}

// GetSegmentStates provides a mock function with given fields: _a0, _a1
func (_m *MockBroker) GetSegmentStates(_a0 context.Context, _a1 *datapb.GetSegmentStatesRequest) (*datapb.GetSegmentStatesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *datapb.GetSegmentStatesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datapb.GetSegmentStatesRequest) (*datapb.GetSegmentStatesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datapb.GetSegmentStatesRequest) *datapb.GetSegmentStatesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datapb.GetSegmentStatesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datapb.GetSegmentStatesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBroker_GetSegmentStates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSegmentStates'
type MockBroker_GetSegmentStates_Call struct {
	*mock.Call
}

// GetSegmentStates is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *datapb.GetSegmentStatesRequest
func (_e *MockBroker_Expecter) GetSegmentStates(_a0 interface{}, _a1 interface{}) *MockBroker_GetSegmentStates_Call {
	return &MockBroker_GetSegmentStates_Call{Call: _e.mock.On("GetSegmentStates", _a0, _a1)}
}

func (_c *MockBroker_GetSegmentStates_Call) Run(run func(_a0 context.Context, _a1 *datapb.GetSegmentStatesRequest)) *MockBroker_GetSegmentStates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*datapb.GetSegmentStatesRequest))
	})
	return _c
}

func (_c *MockBroker_GetSegmentStates_Call) Return(_a0 *datapb.GetSegmentStatesResponse, _a1 error) *MockBroker_GetSegmentStates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBroker_GetSegmentStates_Call) RunAndReturn(run func(context.Context, *datapb.GetSegmentStatesRequest) (*datapb.GetSegmentStatesResponse, error)) *MockBroker_GetSegmentStates_Call {
	_c.Call.Return(run)
	return _c
}

// Import provides a mock function with given fields: ctx, req
func (_m *MockBroker) Import(ctx context.Context, req *datapb.ImportTaskRequest) (*datapb.ImportTaskResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *datapb.ImportTaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datapb.ImportTaskRequest) (*datapb.ImportTaskResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datapb.ImportTaskRequest) *datapb.ImportTaskResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datapb.ImportTaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datapb.ImportTaskRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBroker_Import_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Import'
type MockBroker_Import_Call struct {
	*mock.Call
}

// Import is a helper method to define mock.On call
//   - ctx context.Context
//   - req *datapb.ImportTaskRequest
func (_e *MockBroker_Expecter) Import(ctx interface{}, req interface{}) *MockBroker_Import_Call {
	return &MockBroker_Import_Call{Call: _e.mock.On("Import", ctx, req)}
}

func (_c *MockBroker_Import_Call) Run(run func(ctx context.Context, req *datapb.ImportTaskRequest)) *MockBroker_Import_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*datapb.ImportTaskRequest))
	})
	return _c
}

func (_c *MockBroker_Import_Call) Return(_a0 *datapb.ImportTaskResponse, _a1 error) *MockBroker_Import_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBroker_Import_Call) RunAndReturn(run func(context.Context, *datapb.ImportTaskRequest) (*datapb.ImportTaskResponse, error)) *MockBroker_Import_Call {
	_c.Call.Return(run)
	return _c
}

// ReleaseCollection provides a mock function with given fields: ctx, collectionID
func (_m *MockBroker) ReleaseCollection(ctx context.Context, collectionID int64) error {
	ret := _m.Called(ctx, collectionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, collectionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBroker_ReleaseCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleaseCollection'
type MockBroker_ReleaseCollection_Call struct {
	*mock.Call
}

// ReleaseCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionID int64
func (_e *MockBroker_Expecter) ReleaseCollection(ctx interface{}, collectionID interface{}) *MockBroker_ReleaseCollection_Call {
	return &MockBroker_ReleaseCollection_Call{Call: _e.mock.On("ReleaseCollection", ctx, collectionID)}
}

func (_c *MockBroker_ReleaseCollection_Call) Run(run func(ctx context.Context, collectionID int64)) *MockBroker_ReleaseCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockBroker_ReleaseCollection_Call) Return(_a0 error) *MockBroker_ReleaseCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBroker_ReleaseCollection_Call) RunAndReturn(run func(context.Context, int64) error) *MockBroker_ReleaseCollection_Call {
	_c.Call.Return(run)
	return _c
}

// ReleaseSegRefLock provides a mock function with given fields: ctx, taskID, segIDs
func (_m *MockBroker) ReleaseSegRefLock(ctx context.Context, taskID int64, segIDs []int64) error {
	ret := _m.Called(ctx, taskID, segIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []int64) error); ok {
		r0 = rf(ctx, taskID, segIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBroker_ReleaseSegRefLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleaseSegRefLock'
type MockBroker_ReleaseSegRefLock_Call struct {
	*mock.Call
}

// ReleaseSegRefLock is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID int64
//   - segIDs []int64
func (_e *MockBroker_Expecter) ReleaseSegRefLock(ctx interface{}, taskID interface{}, segIDs interface{}) *MockBroker_ReleaseSegRefLock_Call {
	return &MockBroker_ReleaseSegRefLock_Call{Call: _e.mock.On("ReleaseSegRefLock", ctx, taskID, segIDs)}
}

func (_c *MockBroker_ReleaseSegRefLock_Call) Run(run func(ctx context.Context, taskID int64, segIDs []int64)) *MockBroker_ReleaseSegRefLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].([]int64))
	})
	return _c
}

func (_c *MockBroker_ReleaseSegRefLock_Call) Return(_a0 error) *MockBroker_ReleaseSegRefLock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBroker_ReleaseSegRefLock_Call) RunAndReturn(run func(context.Context, int64, []int64) error) *MockBroker_ReleaseSegRefLock_Call {
	_c.Call.Return(run)
	return _c
}

// UnsetIsImportingState provides a mock function with given fields: _a0, _a1
func (_m *MockBroker) UnsetIsImportingState(_a0 context.Context, _a1 *datapb.UnsetIsImportingStateRequest) (*commonpb.Status, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *commonpb.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datapb.UnsetIsImportingStateRequest) (*commonpb.Status, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datapb.UnsetIsImportingStateRequest) *commonpb.Status); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*commonpb.Status)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datapb.UnsetIsImportingStateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBroker_UnsetIsImportingState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnsetIsImportingState'
type MockBroker_UnsetIsImportingState_Call struct {
	*mock.Call
}

// UnsetIsImportingState is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *datapb.UnsetIsImportingStateRequest
func (_e *MockBroker_Expecter) UnsetIsImportingState(_a0 interface{}, _a1 interface{}) *MockBroker_UnsetIsImportingState_Call {
	return &MockBroker_UnsetIsImportingState_Call{Call: _e.mock.On("UnsetIsImportingState", _a0, _a1)}
}

func (_c *MockBroker_UnsetIsImportingState_Call) Run(run func(_a0 context.Context, _a1 *datapb.UnsetIsImportingStateRequest)) *MockBroker_UnsetIsImportingState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*datapb.UnsetIsImportingStateRequest))
	})
	return _c
}

func (_c *MockBroker_UnsetIsImportingState_Call) Return(_a0 *commonpb.Status, _a1 error) *MockBroker_UnsetIsImportingState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBroker_UnsetIsImportingState_Call) RunAndReturn(run func(context.Context, *datapb.UnsetIsImportingStateRequest) (*commonpb.Status, error)) *MockBroker_UnsetIsImportingState_Call {
	_c.Call.Return(run)
	return _c
}

// UnwatchChannels provides a mock function with given fields: ctx, info
func (_m *MockBroker) UnwatchChannels(ctx context.Context, info *watchInfo) error {
	ret := _m.Called(ctx, info)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *watchInfo) error); ok {
		r0 = rf(ctx, info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBroker_UnwatchChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnwatchChannels'
type MockBroker_UnwatchChannels_Call struct {
	*mock.Call
}

// UnwatchChannels is a helper method to define mock.On call
//   - ctx context.Context
//   - info *watchInfo
func (_e *MockBroker_Expecter) UnwatchChannels(ctx interface{}, info interface{}) *MockBroker_UnwatchChannels_Call {
	return &MockBroker_UnwatchChannels_Call{Call: _e.mock.On("UnwatchChannels", ctx, info)}
}

func (_c *MockBroker_UnwatchChannels_Call) Run(run func(ctx context.Context, info *watchInfo)) *MockBroker_UnwatchChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*watchInfo))
	})
	return _c
}

func (_c *MockBroker_UnwatchChannels_Call) Return(_a0 error) *MockBroker_UnwatchChannels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBroker_UnwatchChannels_Call) RunAndReturn(run func(context.Context, *watchInfo) error) *MockBroker_UnwatchChannels_Call {
	_c.Call.Return(run)
	return _c
}

// WatchChannels provides a mock function with given fields: ctx, info
func (_m *MockBroker) WatchChannels(ctx context.Context, info *watchInfo) error {
	ret := _m.Called(ctx, info)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *watchInfo) error); ok {
		r0 = rf(ctx, info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBroker_WatchChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchChannels'
type MockBroker_WatchChannels_Call struct {
	*mock.Call
}

// WatchChannels is a helper method to define mock.On call
//   - ctx context.Context
//   - info *watchInfo
func (_e *MockBroker_Expecter) WatchChannels(ctx interface{}, info interface{}) *MockBroker_WatchChannels_Call {
	return &MockBroker_WatchChannels_Call{Call: _e.mock.On("WatchChannels", ctx, info)}
}

func (_c *MockBroker_WatchChannels_Call) Run(run func(ctx context.Context, info *watchInfo)) *MockBroker_WatchChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*watchInfo))
	})
	return _c
}

func (_c *MockBroker_WatchChannels_Call) Return(_a0 error) *MockBroker_WatchChannels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBroker_WatchChannels_Call) RunAndReturn(run func(context.Context, *watchInfo) error) *MockBroker_WatchChannels_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockBroker interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockBroker creates a new instance of MockBroker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockBroker(t mockConstructorTestingTNewMockBroker) *MockBroker {
	mock := &MockBroker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
