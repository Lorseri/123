// Copyright (C) 2019-2020 Zilliz. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance
// with the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied. See the License for the specific language governing permissions and limitations under the License.

#include "db/insert/MemSegment.h"

#include <algorithm>
#include <cmath>
#include <iterator>
#include <string>
#include <utility>
#include <vector>

#include "config/ServerConfig.h"
#include "db/Types.h"
#include "db/Utils.h"
#include "db/snapshot/Operations.h"
#include "db/snapshot/Snapshots.h"
#include "db/wal/WalManager.h"
#include "knowhere/index/vector_index/helpers/IndexParameter.h"
#include "metrics/Metrics.h"
#include "utils/Log.h"

namespace milvus {
namespace engine {

MemSegment::MemSegment(int64_t collection_id, int64_t partition_id, const DBOptions& options)
    : collection_id_(collection_id), partition_id_(partition_id), options_(options) {
}

Status
MemSegment::Add(const DataChunkPtr& chunk, idx_t op_id) {
    if (chunk == nullptr) {
        return Status::OK();
    }

    chunks_.insert(std::make_pair(op_id, chunk));
    current_mem_ += utils::GetSizeOfChunk(chunk);

    return Status::OK();
}

Status
MemSegment::Delete(const DeleteIDMap& ids) {
    if (chunks_.empty()) {
        return Status::OK();
    }

    // consider operation sequence, we need to execute delete operation
    // by its operation id(which is generated by timestamp)
    // for example, client do some steps: insert_1, delete_1, insert_2, insert_3, delete_2, delete_3
    // this method should ensure the execute sequence is same is client

    for (auto& pair_chunk : chunks_) {
        idx_t chunk_id = pair_chunk.first;
        DataChunkPtr& chunk = pair_chunk.second;
        if (chunk == nullptr) {
            continue;
        }

        // step 1: find out which delete id apply to which chunk
        std::set<idx_t> delete_ids;
        for (auto& pair_id : ids) {
            if (chunk_id <= pair_id.first) {
                for (auto id : pair_id.second) {
                    delete_ids.insert(id);
                }
            }
        }

        // step 2: load chunk uids
        auto iter = chunk->fixed_fields_.find(FIELD_UID);
        if (iter == chunk->fixed_fields_.end()) {
            continue;  // no uid field?
        }

        BinaryDataPtr& uid_data = iter->second;
        if (uid_data == nullptr) {
            continue;  // no uid data?
        }
        if (uid_data->data_.size() / sizeof(idx_t) != chunk->count_) {
            continue;  // invalid uid data?
        }
        idx_t* uid = (idx_t*)(uid_data->data_.data());

        // step 3: calculte delete offsets
        std::vector<offset_t> offsets;
        for (int64_t i = 0; i < chunk->count_; ++i) {
            if (delete_ids.find(uid[i]) != delete_ids.end()) {
                offsets.push_back(i);
            }
        }

        // step 4: delete entities from chunks
        Segment temp_set;
        temp_set.SetFields(collection_id_);
        temp_set.AddChunk(chunk);
        temp_set.DeleteEntity(offsets);
        chunk->count_ = temp_set.GetRowCount();
    }

    return Status::OK();
}

int64_t
MemSegment::GetCurrentMem() {
    return current_mem_;
}

Status
MemSegment::Serialize() {
    int64_t size = GetCurrentMem();
    server::CollectSerializeMetrics metrics(size);

    snapshot::ScopedSnapshotT ss;
    auto status = snapshot::Snapshots::GetInstance().GetSnapshot(ss, collection_id_);
    if (!status.ok()) {
        std::string err_msg = "Failed to get latest snapshot: " + status.ToString();
        LOG_ENGINE_ERROR_ << err_msg;
        return status;
    }

    std::shared_ptr<snapshot::NewSegmentOperation> new_seg_operation;
    segment::SegmentWriterPtr segment_writer;
    status = CreateNewSegment(ss, new_seg_operation, segment_writer);
    if (!status.ok()) {
        LOG_ENGINE_ERROR_ << "Failed to create new segment";
        return status;
    }

    status = PutChunksToWriter(segment_writer);
    if (!status.ok()) {
        LOG_ENGINE_ERROR_ << "Failed to copy data to segment writer";
        return status;
    }

    // delete action could delete all entities of the segment
    // no need to serialize empty segment
    if (segment_writer->RowCount() == 0) {
        return Status::OK();
    }

    int64_t seg_id = 0;
    segment_writer->GetSegmentID(seg_id);
    status = segment_writer->Serialize();
    if (!status.ok()) {
        LOG_ENGINE_ERROR_ << "Failed to serialize segment: " << seg_id;
        return status;
    }

    STATUS_CHECK(new_seg_operation->CommitRowCount(segment_writer->RowCount()));
    STATUS_CHECK(new_seg_operation->Push());
    LOG_ENGINE_DEBUG_ << "New segment " << seg_id << " of collection " << collection_id_ << " serialized";

    if (!chunks_.empty()) {
        idx_t max_op_id = chunks_.rbegin()->first;
        WalManager::GetInstance().OperationDone(ss->GetName(), max_op_id);
    }

    return Status::OK();
}

Status
MemSegment::CreateNewSegment(snapshot::ScopedSnapshotT& ss, std::shared_ptr<snapshot::NewSegmentOperation>& operation,
                             segment::SegmentWriterPtr& writer) {
    // create segment
    snapshot::SegmentPtr segment;
    snapshot::OperationContext context;
    context.prev_partition = ss->GetResource<snapshot::Partition>(partition_id_);
    operation = std::make_shared<snapshot::NewSegmentOperation>(context, ss);
    auto status = operation->CommitNewSegment(segment);
    if (!status.ok()) {
        std::string err_msg = "MemSegment::CreateSegment failed: " + status.ToString();
        LOG_ENGINE_ERROR_ << err_msg;
        return status;
    }

    // create segment raw files (placeholder)
    auto names = ss->GetFieldNames();
    for (auto& name : names) {
        snapshot::SegmentFileContext sf_context;
        sf_context.collection_id = collection_id_;
        sf_context.partition_id = partition_id_;
        sf_context.segment_id = segment->GetID();
        sf_context.field_name = name;
        sf_context.field_element_name = engine::ELEMENT_RAW_DATA;

        snapshot::SegmentFilePtr seg_file;
        status = operation->CommitNewSegmentFile(sf_context, seg_file);
        if (!status.ok()) {
            std::string err_msg = "MemSegment::CreateSegment failed: " + status.ToString();
            LOG_ENGINE_ERROR_ << err_msg;
            return status;
        }
    }

    // create deleted_doc and bloom_filter files (placeholder)
    {
        snapshot::SegmentFileContext sf_context;
        sf_context.collection_id = collection_id_;
        sf_context.partition_id = partition_id_;
        sf_context.segment_id = segment->GetID();
        sf_context.field_name = engine::FIELD_UID;
        sf_context.field_element_name = engine::ELEMENT_DELETED_DOCS;

        snapshot::SegmentFilePtr delete_doc_file, bloom_filter_file;
        status = operation->CommitNewSegmentFile(sf_context, delete_doc_file);
        if (!status.ok()) {
            std::string err_msg = "MemSegment::CreateSegment failed: " + status.ToString();
            LOG_ENGINE_ERROR_ << err_msg;
            return status;
        }

        sf_context.field_element_name = engine::ELEMENT_BLOOM_FILTER;
        status = operation->CommitNewSegmentFile(sf_context, bloom_filter_file);
        if (!status.ok()) {
            std::string err_msg = "MemSegment::CreateSegment failed: " + status.ToString();
            LOG_ENGINE_ERROR_ << err_msg;
            return status;
        }
    }

    auto ctx = operation->GetContext();
    auto visitor = SegmentVisitor::Build(ss, ctx.new_segment, ctx.new_segment_files);

    // create segment writer
    writer = std::make_shared<segment::SegmentWriter>(options_.meta_.path_, visitor);

    return Status::OK();
}

Status
MemSegment::PutChunksToWriter(const segment::SegmentWriterPtr& writer) {
    if (writer == nullptr) {
        return Status(DB_ERROR, "Segment writer is null pointer");
    }

    for (auto& pair_chunk : chunks_) {
        DataChunkPtr& chunk = pair_chunk.second;
        if (chunk == nullptr || chunk->count_ == 0) {
            continue;
        }

        // copy data to writer
        writer->AddChunk(chunk);
    }

    return Status::OK();
}

}  // namespace engine
}  // namespace milvus
